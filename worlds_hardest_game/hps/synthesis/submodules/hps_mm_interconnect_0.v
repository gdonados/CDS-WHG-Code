// hps_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module hps_mm_interconnect_0 (
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire        clk_0_clk_clk,                                                       //                                                     clk_0_clk.clk
		input  wire        de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset,         //         de10_vga_raster_sprites_0_reset_reset_bridge_in_reset.reset
		input  wire        hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		output wire [1:0]  button_down_s1_address,                                              //                                                button_down_s1.address
		input  wire [31:0] button_down_s1_readdata,                                             //                                                              .readdata
		output wire [1:0]  button_left_s1_address,                                              //                                                button_left_s1.address
		input  wire [31:0] button_left_s1_readdata,                                             //                                                              .readdata
		output wire [1:0]  button_right_s1_address,                                             //                                               button_right_s1.address
		input  wire [31:0] button_right_s1_readdata,                                            //                                                              .readdata
		output wire [1:0]  button_up_s1_address,                                                //                                                  button_up_s1.address
		input  wire [31:0] button_up_s1_readdata,                                               //                                                              .readdata
		output wire [15:0] de10_vga_raster_sprites_0_avalon_slave_0_address,                    //                      de10_vga_raster_sprites_0_avalon_slave_0.address
		output wire        de10_vga_raster_sprites_0_avalon_slave_0_write,                      //                                                              .write
		output wire        de10_vga_raster_sprites_0_avalon_slave_0_read,                       //                                                              .read
		input  wire [15:0] de10_vga_raster_sprites_0_avalon_slave_0_readdata,                   //                                                              .readdata
		output wire [15:0] de10_vga_raster_sprites_0_avalon_slave_0_writedata,                  //                                                              .writedata
		output wire        de10_vga_raster_sprites_0_avalon_slave_0_chipselect,                 //                                                              .chipselect
		output wire [1:0]  hex0_s1_address,                                                     //                                                       hex0_s1.address
		output wire        hex0_s1_write,                                                       //                                                              .write
		input  wire [31:0] hex0_s1_readdata,                                                    //                                                              .readdata
		output wire [31:0] hex0_s1_writedata,                                                   //                                                              .writedata
		output wire        hex0_s1_chipselect,                                                  //                                                              .chipselect
		output wire [1:0]  hex1_s1_address,                                                     //                                                       hex1_s1.address
		output wire        hex1_s1_write,                                                       //                                                              .write
		input  wire [31:0] hex1_s1_readdata,                                                    //                                                              .readdata
		output wire [31:0] hex1_s1_writedata,                                                   //                                                              .writedata
		output wire        hex1_s1_chipselect,                                                  //                                                              .chipselect
		output wire [1:0]  hex2_s1_address,                                                     //                                                       hex2_s1.address
		output wire        hex2_s1_write,                                                       //                                                              .write
		input  wire [31:0] hex2_s1_readdata,                                                    //                                                              .readdata
		output wire [31:0] hex2_s1_writedata,                                                   //                                                              .writedata
		output wire        hex2_s1_chipselect,                                                  //                                                              .chipselect
		output wire [1:0]  reset_switch_s1_address,                                             //                                               reset_switch_s1.address
		input  wire [31:0] reset_switch_s1_readdata                                             //                                                              .readdata
	);

	wire   [15:0] de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_readdata;                   // de10_vga_raster_sprites_0_avalon_slave_0_translator:uav_readdata -> de10_vga_raster_sprites_0_avalon_slave_0_agent:m0_readdata
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_waitrequest;                // de10_vga_raster_sprites_0_avalon_slave_0_translator:uav_waitrequest -> de10_vga_raster_sprites_0_avalon_slave_0_agent:m0_waitrequest
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_debugaccess;                // de10_vga_raster_sprites_0_avalon_slave_0_agent:m0_debugaccess -> de10_vga_raster_sprites_0_avalon_slave_0_translator:uav_debugaccess
	wire   [20:0] de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_address;                    // de10_vga_raster_sprites_0_avalon_slave_0_agent:m0_address -> de10_vga_raster_sprites_0_avalon_slave_0_translator:uav_address
	wire    [1:0] de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_byteenable;                 // de10_vga_raster_sprites_0_avalon_slave_0_agent:m0_byteenable -> de10_vga_raster_sprites_0_avalon_slave_0_translator:uav_byteenable
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_read;                       // de10_vga_raster_sprites_0_avalon_slave_0_agent:m0_read -> de10_vga_raster_sprites_0_avalon_slave_0_translator:uav_read
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_readdatavalid;              // de10_vga_raster_sprites_0_avalon_slave_0_translator:uav_readdatavalid -> de10_vga_raster_sprites_0_avalon_slave_0_agent:m0_readdatavalid
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_lock;                       // de10_vga_raster_sprites_0_avalon_slave_0_agent:m0_lock -> de10_vga_raster_sprites_0_avalon_slave_0_translator:uav_lock
	wire   [15:0] de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_writedata;                  // de10_vga_raster_sprites_0_avalon_slave_0_agent:m0_writedata -> de10_vga_raster_sprites_0_avalon_slave_0_translator:uav_writedata
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_write;                      // de10_vga_raster_sprites_0_avalon_slave_0_agent:m0_write -> de10_vga_raster_sprites_0_avalon_slave_0_translator:uav_write
	wire    [1:0] de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_burstcount;                 // de10_vga_raster_sprites_0_avalon_slave_0_agent:m0_burstcount -> de10_vga_raster_sprites_0_avalon_slave_0_translator:uav_burstcount
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rf_source_valid;               // de10_vga_raster_sprites_0_avalon_slave_0_agent:rf_source_valid -> de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [100:0] de10_vga_raster_sprites_0_avalon_slave_0_agent_rf_source_data;                // de10_vga_raster_sprites_0_avalon_slave_0_agent:rf_source_data -> de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rf_source_ready;               // de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo:in_ready -> de10_vga_raster_sprites_0_avalon_slave_0_agent:rf_source_ready
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rf_source_startofpacket;       // de10_vga_raster_sprites_0_avalon_slave_0_agent:rf_source_startofpacket -> de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rf_source_endofpacket;         // de10_vga_raster_sprites_0_avalon_slave_0_agent:rf_source_endofpacket -> de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo_out_valid;            // de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo:out_valid -> de10_vga_raster_sprites_0_avalon_slave_0_agent:rf_sink_valid
	wire  [100:0] de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo_out_data;             // de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo:out_data -> de10_vga_raster_sprites_0_avalon_slave_0_agent:rf_sink_data
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo_out_ready;            // de10_vga_raster_sprites_0_avalon_slave_0_agent:rf_sink_ready -> de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;    // de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> de10_vga_raster_sprites_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;      // de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> de10_vga_raster_sprites_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_src_valid;          // de10_vga_raster_sprites_0_avalon_slave_0_agent:rdata_fifo_src_valid -> de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo:in_valid
	wire   [17:0] de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_src_data;           // de10_vga_raster_sprites_0_avalon_slave_0_agent:rdata_fifo_src_data -> de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo:in_data
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_src_ready;          // de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo:in_ready -> de10_vga_raster_sprites_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] hex0_s1_agent_m0_readdata;                                                    // hex0_s1_translator:uav_readdata -> hex0_s1_agent:m0_readdata
	wire          hex0_s1_agent_m0_waitrequest;                                                 // hex0_s1_translator:uav_waitrequest -> hex0_s1_agent:m0_waitrequest
	wire          hex0_s1_agent_m0_debugaccess;                                                 // hex0_s1_agent:m0_debugaccess -> hex0_s1_translator:uav_debugaccess
	wire   [20:0] hex0_s1_agent_m0_address;                                                     // hex0_s1_agent:m0_address -> hex0_s1_translator:uav_address
	wire    [3:0] hex0_s1_agent_m0_byteenable;                                                  // hex0_s1_agent:m0_byteenable -> hex0_s1_translator:uav_byteenable
	wire          hex0_s1_agent_m0_read;                                                        // hex0_s1_agent:m0_read -> hex0_s1_translator:uav_read
	wire          hex0_s1_agent_m0_readdatavalid;                                               // hex0_s1_translator:uav_readdatavalid -> hex0_s1_agent:m0_readdatavalid
	wire          hex0_s1_agent_m0_lock;                                                        // hex0_s1_agent:m0_lock -> hex0_s1_translator:uav_lock
	wire   [31:0] hex0_s1_agent_m0_writedata;                                                   // hex0_s1_agent:m0_writedata -> hex0_s1_translator:uav_writedata
	wire          hex0_s1_agent_m0_write;                                                       // hex0_s1_agent:m0_write -> hex0_s1_translator:uav_write
	wire    [2:0] hex0_s1_agent_m0_burstcount;                                                  // hex0_s1_agent:m0_burstcount -> hex0_s1_translator:uav_burstcount
	wire          hex0_s1_agent_rf_source_valid;                                                // hex0_s1_agent:rf_source_valid -> hex0_s1_agent_rsp_fifo:in_valid
	wire  [118:0] hex0_s1_agent_rf_source_data;                                                 // hex0_s1_agent:rf_source_data -> hex0_s1_agent_rsp_fifo:in_data
	wire          hex0_s1_agent_rf_source_ready;                                                // hex0_s1_agent_rsp_fifo:in_ready -> hex0_s1_agent:rf_source_ready
	wire          hex0_s1_agent_rf_source_startofpacket;                                        // hex0_s1_agent:rf_source_startofpacket -> hex0_s1_agent_rsp_fifo:in_startofpacket
	wire          hex0_s1_agent_rf_source_endofpacket;                                          // hex0_s1_agent:rf_source_endofpacket -> hex0_s1_agent_rsp_fifo:in_endofpacket
	wire          hex0_s1_agent_rsp_fifo_out_valid;                                             // hex0_s1_agent_rsp_fifo:out_valid -> hex0_s1_agent:rf_sink_valid
	wire  [118:0] hex0_s1_agent_rsp_fifo_out_data;                                              // hex0_s1_agent_rsp_fifo:out_data -> hex0_s1_agent:rf_sink_data
	wire          hex0_s1_agent_rsp_fifo_out_ready;                                             // hex0_s1_agent:rf_sink_ready -> hex0_s1_agent_rsp_fifo:out_ready
	wire          hex0_s1_agent_rsp_fifo_out_startofpacket;                                     // hex0_s1_agent_rsp_fifo:out_startofpacket -> hex0_s1_agent:rf_sink_startofpacket
	wire          hex0_s1_agent_rsp_fifo_out_endofpacket;                                       // hex0_s1_agent_rsp_fifo:out_endofpacket -> hex0_s1_agent:rf_sink_endofpacket
	wire          hex0_s1_agent_rdata_fifo_src_valid;                                           // hex0_s1_agent:rdata_fifo_src_valid -> hex0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] hex0_s1_agent_rdata_fifo_src_data;                                            // hex0_s1_agent:rdata_fifo_src_data -> hex0_s1_agent_rdata_fifo:in_data
	wire          hex0_s1_agent_rdata_fifo_src_ready;                                           // hex0_s1_agent_rdata_fifo:in_ready -> hex0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] hex1_s1_agent_m0_readdata;                                                    // hex1_s1_translator:uav_readdata -> hex1_s1_agent:m0_readdata
	wire          hex1_s1_agent_m0_waitrequest;                                                 // hex1_s1_translator:uav_waitrequest -> hex1_s1_agent:m0_waitrequest
	wire          hex1_s1_agent_m0_debugaccess;                                                 // hex1_s1_agent:m0_debugaccess -> hex1_s1_translator:uav_debugaccess
	wire   [20:0] hex1_s1_agent_m0_address;                                                     // hex1_s1_agent:m0_address -> hex1_s1_translator:uav_address
	wire    [3:0] hex1_s1_agent_m0_byteenable;                                                  // hex1_s1_agent:m0_byteenable -> hex1_s1_translator:uav_byteenable
	wire          hex1_s1_agent_m0_read;                                                        // hex1_s1_agent:m0_read -> hex1_s1_translator:uav_read
	wire          hex1_s1_agent_m0_readdatavalid;                                               // hex1_s1_translator:uav_readdatavalid -> hex1_s1_agent:m0_readdatavalid
	wire          hex1_s1_agent_m0_lock;                                                        // hex1_s1_agent:m0_lock -> hex1_s1_translator:uav_lock
	wire   [31:0] hex1_s1_agent_m0_writedata;                                                   // hex1_s1_agent:m0_writedata -> hex1_s1_translator:uav_writedata
	wire          hex1_s1_agent_m0_write;                                                       // hex1_s1_agent:m0_write -> hex1_s1_translator:uav_write
	wire    [2:0] hex1_s1_agent_m0_burstcount;                                                  // hex1_s1_agent:m0_burstcount -> hex1_s1_translator:uav_burstcount
	wire          hex1_s1_agent_rf_source_valid;                                                // hex1_s1_agent:rf_source_valid -> hex1_s1_agent_rsp_fifo:in_valid
	wire  [118:0] hex1_s1_agent_rf_source_data;                                                 // hex1_s1_agent:rf_source_data -> hex1_s1_agent_rsp_fifo:in_data
	wire          hex1_s1_agent_rf_source_ready;                                                // hex1_s1_agent_rsp_fifo:in_ready -> hex1_s1_agent:rf_source_ready
	wire          hex1_s1_agent_rf_source_startofpacket;                                        // hex1_s1_agent:rf_source_startofpacket -> hex1_s1_agent_rsp_fifo:in_startofpacket
	wire          hex1_s1_agent_rf_source_endofpacket;                                          // hex1_s1_agent:rf_source_endofpacket -> hex1_s1_agent_rsp_fifo:in_endofpacket
	wire          hex1_s1_agent_rsp_fifo_out_valid;                                             // hex1_s1_agent_rsp_fifo:out_valid -> hex1_s1_agent:rf_sink_valid
	wire  [118:0] hex1_s1_agent_rsp_fifo_out_data;                                              // hex1_s1_agent_rsp_fifo:out_data -> hex1_s1_agent:rf_sink_data
	wire          hex1_s1_agent_rsp_fifo_out_ready;                                             // hex1_s1_agent:rf_sink_ready -> hex1_s1_agent_rsp_fifo:out_ready
	wire          hex1_s1_agent_rsp_fifo_out_startofpacket;                                     // hex1_s1_agent_rsp_fifo:out_startofpacket -> hex1_s1_agent:rf_sink_startofpacket
	wire          hex1_s1_agent_rsp_fifo_out_endofpacket;                                       // hex1_s1_agent_rsp_fifo:out_endofpacket -> hex1_s1_agent:rf_sink_endofpacket
	wire          hex1_s1_agent_rdata_fifo_src_valid;                                           // hex1_s1_agent:rdata_fifo_src_valid -> hex1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] hex1_s1_agent_rdata_fifo_src_data;                                            // hex1_s1_agent:rdata_fifo_src_data -> hex1_s1_agent_rdata_fifo:in_data
	wire          hex1_s1_agent_rdata_fifo_src_ready;                                           // hex1_s1_agent_rdata_fifo:in_ready -> hex1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] hex2_s1_agent_m0_readdata;                                                    // hex2_s1_translator:uav_readdata -> hex2_s1_agent:m0_readdata
	wire          hex2_s1_agent_m0_waitrequest;                                                 // hex2_s1_translator:uav_waitrequest -> hex2_s1_agent:m0_waitrequest
	wire          hex2_s1_agent_m0_debugaccess;                                                 // hex2_s1_agent:m0_debugaccess -> hex2_s1_translator:uav_debugaccess
	wire   [20:0] hex2_s1_agent_m0_address;                                                     // hex2_s1_agent:m0_address -> hex2_s1_translator:uav_address
	wire    [3:0] hex2_s1_agent_m0_byteenable;                                                  // hex2_s1_agent:m0_byteenable -> hex2_s1_translator:uav_byteenable
	wire          hex2_s1_agent_m0_read;                                                        // hex2_s1_agent:m0_read -> hex2_s1_translator:uav_read
	wire          hex2_s1_agent_m0_readdatavalid;                                               // hex2_s1_translator:uav_readdatavalid -> hex2_s1_agent:m0_readdatavalid
	wire          hex2_s1_agent_m0_lock;                                                        // hex2_s1_agent:m0_lock -> hex2_s1_translator:uav_lock
	wire   [31:0] hex2_s1_agent_m0_writedata;                                                   // hex2_s1_agent:m0_writedata -> hex2_s1_translator:uav_writedata
	wire          hex2_s1_agent_m0_write;                                                       // hex2_s1_agent:m0_write -> hex2_s1_translator:uav_write
	wire    [2:0] hex2_s1_agent_m0_burstcount;                                                  // hex2_s1_agent:m0_burstcount -> hex2_s1_translator:uav_burstcount
	wire          hex2_s1_agent_rf_source_valid;                                                // hex2_s1_agent:rf_source_valid -> hex2_s1_agent_rsp_fifo:in_valid
	wire  [118:0] hex2_s1_agent_rf_source_data;                                                 // hex2_s1_agent:rf_source_data -> hex2_s1_agent_rsp_fifo:in_data
	wire          hex2_s1_agent_rf_source_ready;                                                // hex2_s1_agent_rsp_fifo:in_ready -> hex2_s1_agent:rf_source_ready
	wire          hex2_s1_agent_rf_source_startofpacket;                                        // hex2_s1_agent:rf_source_startofpacket -> hex2_s1_agent_rsp_fifo:in_startofpacket
	wire          hex2_s1_agent_rf_source_endofpacket;                                          // hex2_s1_agent:rf_source_endofpacket -> hex2_s1_agent_rsp_fifo:in_endofpacket
	wire          hex2_s1_agent_rsp_fifo_out_valid;                                             // hex2_s1_agent_rsp_fifo:out_valid -> hex2_s1_agent:rf_sink_valid
	wire  [118:0] hex2_s1_agent_rsp_fifo_out_data;                                              // hex2_s1_agent_rsp_fifo:out_data -> hex2_s1_agent:rf_sink_data
	wire          hex2_s1_agent_rsp_fifo_out_ready;                                             // hex2_s1_agent:rf_sink_ready -> hex2_s1_agent_rsp_fifo:out_ready
	wire          hex2_s1_agent_rsp_fifo_out_startofpacket;                                     // hex2_s1_agent_rsp_fifo:out_startofpacket -> hex2_s1_agent:rf_sink_startofpacket
	wire          hex2_s1_agent_rsp_fifo_out_endofpacket;                                       // hex2_s1_agent_rsp_fifo:out_endofpacket -> hex2_s1_agent:rf_sink_endofpacket
	wire          hex2_s1_agent_rdata_fifo_src_valid;                                           // hex2_s1_agent:rdata_fifo_src_valid -> hex2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] hex2_s1_agent_rdata_fifo_src_data;                                            // hex2_s1_agent:rdata_fifo_src_data -> hex2_s1_agent_rdata_fifo:in_data
	wire          hex2_s1_agent_rdata_fifo_src_ready;                                           // hex2_s1_agent_rdata_fifo:in_ready -> hex2_s1_agent:rdata_fifo_src_ready
	wire   [31:0] button_up_s1_agent_m0_readdata;                                               // button_up_s1_translator:uav_readdata -> button_up_s1_agent:m0_readdata
	wire          button_up_s1_agent_m0_waitrequest;                                            // button_up_s1_translator:uav_waitrequest -> button_up_s1_agent:m0_waitrequest
	wire          button_up_s1_agent_m0_debugaccess;                                            // button_up_s1_agent:m0_debugaccess -> button_up_s1_translator:uav_debugaccess
	wire   [20:0] button_up_s1_agent_m0_address;                                                // button_up_s1_agent:m0_address -> button_up_s1_translator:uav_address
	wire    [3:0] button_up_s1_agent_m0_byteenable;                                             // button_up_s1_agent:m0_byteenable -> button_up_s1_translator:uav_byteenable
	wire          button_up_s1_agent_m0_read;                                                   // button_up_s1_agent:m0_read -> button_up_s1_translator:uav_read
	wire          button_up_s1_agent_m0_readdatavalid;                                          // button_up_s1_translator:uav_readdatavalid -> button_up_s1_agent:m0_readdatavalid
	wire          button_up_s1_agent_m0_lock;                                                   // button_up_s1_agent:m0_lock -> button_up_s1_translator:uav_lock
	wire   [31:0] button_up_s1_agent_m0_writedata;                                              // button_up_s1_agent:m0_writedata -> button_up_s1_translator:uav_writedata
	wire          button_up_s1_agent_m0_write;                                                  // button_up_s1_agent:m0_write -> button_up_s1_translator:uav_write
	wire    [2:0] button_up_s1_agent_m0_burstcount;                                             // button_up_s1_agent:m0_burstcount -> button_up_s1_translator:uav_burstcount
	wire          button_up_s1_agent_rf_source_valid;                                           // button_up_s1_agent:rf_source_valid -> button_up_s1_agent_rsp_fifo:in_valid
	wire  [118:0] button_up_s1_agent_rf_source_data;                                            // button_up_s1_agent:rf_source_data -> button_up_s1_agent_rsp_fifo:in_data
	wire          button_up_s1_agent_rf_source_ready;                                           // button_up_s1_agent_rsp_fifo:in_ready -> button_up_s1_agent:rf_source_ready
	wire          button_up_s1_agent_rf_source_startofpacket;                                   // button_up_s1_agent:rf_source_startofpacket -> button_up_s1_agent_rsp_fifo:in_startofpacket
	wire          button_up_s1_agent_rf_source_endofpacket;                                     // button_up_s1_agent:rf_source_endofpacket -> button_up_s1_agent_rsp_fifo:in_endofpacket
	wire          button_up_s1_agent_rsp_fifo_out_valid;                                        // button_up_s1_agent_rsp_fifo:out_valid -> button_up_s1_agent:rf_sink_valid
	wire  [118:0] button_up_s1_agent_rsp_fifo_out_data;                                         // button_up_s1_agent_rsp_fifo:out_data -> button_up_s1_agent:rf_sink_data
	wire          button_up_s1_agent_rsp_fifo_out_ready;                                        // button_up_s1_agent:rf_sink_ready -> button_up_s1_agent_rsp_fifo:out_ready
	wire          button_up_s1_agent_rsp_fifo_out_startofpacket;                                // button_up_s1_agent_rsp_fifo:out_startofpacket -> button_up_s1_agent:rf_sink_startofpacket
	wire          button_up_s1_agent_rsp_fifo_out_endofpacket;                                  // button_up_s1_agent_rsp_fifo:out_endofpacket -> button_up_s1_agent:rf_sink_endofpacket
	wire          button_up_s1_agent_rdata_fifo_src_valid;                                      // button_up_s1_agent:rdata_fifo_src_valid -> button_up_s1_agent_rdata_fifo:in_valid
	wire   [33:0] button_up_s1_agent_rdata_fifo_src_data;                                       // button_up_s1_agent:rdata_fifo_src_data -> button_up_s1_agent_rdata_fifo:in_data
	wire          button_up_s1_agent_rdata_fifo_src_ready;                                      // button_up_s1_agent_rdata_fifo:in_ready -> button_up_s1_agent:rdata_fifo_src_ready
	wire   [31:0] button_down_s1_agent_m0_readdata;                                             // button_down_s1_translator:uav_readdata -> button_down_s1_agent:m0_readdata
	wire          button_down_s1_agent_m0_waitrequest;                                          // button_down_s1_translator:uav_waitrequest -> button_down_s1_agent:m0_waitrequest
	wire          button_down_s1_agent_m0_debugaccess;                                          // button_down_s1_agent:m0_debugaccess -> button_down_s1_translator:uav_debugaccess
	wire   [20:0] button_down_s1_agent_m0_address;                                              // button_down_s1_agent:m0_address -> button_down_s1_translator:uav_address
	wire    [3:0] button_down_s1_agent_m0_byteenable;                                           // button_down_s1_agent:m0_byteenable -> button_down_s1_translator:uav_byteenable
	wire          button_down_s1_agent_m0_read;                                                 // button_down_s1_agent:m0_read -> button_down_s1_translator:uav_read
	wire          button_down_s1_agent_m0_readdatavalid;                                        // button_down_s1_translator:uav_readdatavalid -> button_down_s1_agent:m0_readdatavalid
	wire          button_down_s1_agent_m0_lock;                                                 // button_down_s1_agent:m0_lock -> button_down_s1_translator:uav_lock
	wire   [31:0] button_down_s1_agent_m0_writedata;                                            // button_down_s1_agent:m0_writedata -> button_down_s1_translator:uav_writedata
	wire          button_down_s1_agent_m0_write;                                                // button_down_s1_agent:m0_write -> button_down_s1_translator:uav_write
	wire    [2:0] button_down_s1_agent_m0_burstcount;                                           // button_down_s1_agent:m0_burstcount -> button_down_s1_translator:uav_burstcount
	wire          button_down_s1_agent_rf_source_valid;                                         // button_down_s1_agent:rf_source_valid -> button_down_s1_agent_rsp_fifo:in_valid
	wire  [118:0] button_down_s1_agent_rf_source_data;                                          // button_down_s1_agent:rf_source_data -> button_down_s1_agent_rsp_fifo:in_data
	wire          button_down_s1_agent_rf_source_ready;                                         // button_down_s1_agent_rsp_fifo:in_ready -> button_down_s1_agent:rf_source_ready
	wire          button_down_s1_agent_rf_source_startofpacket;                                 // button_down_s1_agent:rf_source_startofpacket -> button_down_s1_agent_rsp_fifo:in_startofpacket
	wire          button_down_s1_agent_rf_source_endofpacket;                                   // button_down_s1_agent:rf_source_endofpacket -> button_down_s1_agent_rsp_fifo:in_endofpacket
	wire          button_down_s1_agent_rsp_fifo_out_valid;                                      // button_down_s1_agent_rsp_fifo:out_valid -> button_down_s1_agent:rf_sink_valid
	wire  [118:0] button_down_s1_agent_rsp_fifo_out_data;                                       // button_down_s1_agent_rsp_fifo:out_data -> button_down_s1_agent:rf_sink_data
	wire          button_down_s1_agent_rsp_fifo_out_ready;                                      // button_down_s1_agent:rf_sink_ready -> button_down_s1_agent_rsp_fifo:out_ready
	wire          button_down_s1_agent_rsp_fifo_out_startofpacket;                              // button_down_s1_agent_rsp_fifo:out_startofpacket -> button_down_s1_agent:rf_sink_startofpacket
	wire          button_down_s1_agent_rsp_fifo_out_endofpacket;                                // button_down_s1_agent_rsp_fifo:out_endofpacket -> button_down_s1_agent:rf_sink_endofpacket
	wire          button_down_s1_agent_rdata_fifo_src_valid;                                    // button_down_s1_agent:rdata_fifo_src_valid -> button_down_s1_agent_rdata_fifo:in_valid
	wire   [33:0] button_down_s1_agent_rdata_fifo_src_data;                                     // button_down_s1_agent:rdata_fifo_src_data -> button_down_s1_agent_rdata_fifo:in_data
	wire          button_down_s1_agent_rdata_fifo_src_ready;                                    // button_down_s1_agent_rdata_fifo:in_ready -> button_down_s1_agent:rdata_fifo_src_ready
	wire   [31:0] button_left_s1_agent_m0_readdata;                                             // button_left_s1_translator:uav_readdata -> button_left_s1_agent:m0_readdata
	wire          button_left_s1_agent_m0_waitrequest;                                          // button_left_s1_translator:uav_waitrequest -> button_left_s1_agent:m0_waitrequest
	wire          button_left_s1_agent_m0_debugaccess;                                          // button_left_s1_agent:m0_debugaccess -> button_left_s1_translator:uav_debugaccess
	wire   [20:0] button_left_s1_agent_m0_address;                                              // button_left_s1_agent:m0_address -> button_left_s1_translator:uav_address
	wire    [3:0] button_left_s1_agent_m0_byteenable;                                           // button_left_s1_agent:m0_byteenable -> button_left_s1_translator:uav_byteenable
	wire          button_left_s1_agent_m0_read;                                                 // button_left_s1_agent:m0_read -> button_left_s1_translator:uav_read
	wire          button_left_s1_agent_m0_readdatavalid;                                        // button_left_s1_translator:uav_readdatavalid -> button_left_s1_agent:m0_readdatavalid
	wire          button_left_s1_agent_m0_lock;                                                 // button_left_s1_agent:m0_lock -> button_left_s1_translator:uav_lock
	wire   [31:0] button_left_s1_agent_m0_writedata;                                            // button_left_s1_agent:m0_writedata -> button_left_s1_translator:uav_writedata
	wire          button_left_s1_agent_m0_write;                                                // button_left_s1_agent:m0_write -> button_left_s1_translator:uav_write
	wire    [2:0] button_left_s1_agent_m0_burstcount;                                           // button_left_s1_agent:m0_burstcount -> button_left_s1_translator:uav_burstcount
	wire          button_left_s1_agent_rf_source_valid;                                         // button_left_s1_agent:rf_source_valid -> button_left_s1_agent_rsp_fifo:in_valid
	wire  [118:0] button_left_s1_agent_rf_source_data;                                          // button_left_s1_agent:rf_source_data -> button_left_s1_agent_rsp_fifo:in_data
	wire          button_left_s1_agent_rf_source_ready;                                         // button_left_s1_agent_rsp_fifo:in_ready -> button_left_s1_agent:rf_source_ready
	wire          button_left_s1_agent_rf_source_startofpacket;                                 // button_left_s1_agent:rf_source_startofpacket -> button_left_s1_agent_rsp_fifo:in_startofpacket
	wire          button_left_s1_agent_rf_source_endofpacket;                                   // button_left_s1_agent:rf_source_endofpacket -> button_left_s1_agent_rsp_fifo:in_endofpacket
	wire          button_left_s1_agent_rsp_fifo_out_valid;                                      // button_left_s1_agent_rsp_fifo:out_valid -> button_left_s1_agent:rf_sink_valid
	wire  [118:0] button_left_s1_agent_rsp_fifo_out_data;                                       // button_left_s1_agent_rsp_fifo:out_data -> button_left_s1_agent:rf_sink_data
	wire          button_left_s1_agent_rsp_fifo_out_ready;                                      // button_left_s1_agent:rf_sink_ready -> button_left_s1_agent_rsp_fifo:out_ready
	wire          button_left_s1_agent_rsp_fifo_out_startofpacket;                              // button_left_s1_agent_rsp_fifo:out_startofpacket -> button_left_s1_agent:rf_sink_startofpacket
	wire          button_left_s1_agent_rsp_fifo_out_endofpacket;                                // button_left_s1_agent_rsp_fifo:out_endofpacket -> button_left_s1_agent:rf_sink_endofpacket
	wire          button_left_s1_agent_rdata_fifo_src_valid;                                    // button_left_s1_agent:rdata_fifo_src_valid -> button_left_s1_agent_rdata_fifo:in_valid
	wire   [33:0] button_left_s1_agent_rdata_fifo_src_data;                                     // button_left_s1_agent:rdata_fifo_src_data -> button_left_s1_agent_rdata_fifo:in_data
	wire          button_left_s1_agent_rdata_fifo_src_ready;                                    // button_left_s1_agent_rdata_fifo:in_ready -> button_left_s1_agent:rdata_fifo_src_ready
	wire   [31:0] button_right_s1_agent_m0_readdata;                                            // button_right_s1_translator:uav_readdata -> button_right_s1_agent:m0_readdata
	wire          button_right_s1_agent_m0_waitrequest;                                         // button_right_s1_translator:uav_waitrequest -> button_right_s1_agent:m0_waitrequest
	wire          button_right_s1_agent_m0_debugaccess;                                         // button_right_s1_agent:m0_debugaccess -> button_right_s1_translator:uav_debugaccess
	wire   [20:0] button_right_s1_agent_m0_address;                                             // button_right_s1_agent:m0_address -> button_right_s1_translator:uav_address
	wire    [3:0] button_right_s1_agent_m0_byteenable;                                          // button_right_s1_agent:m0_byteenable -> button_right_s1_translator:uav_byteenable
	wire          button_right_s1_agent_m0_read;                                                // button_right_s1_agent:m0_read -> button_right_s1_translator:uav_read
	wire          button_right_s1_agent_m0_readdatavalid;                                       // button_right_s1_translator:uav_readdatavalid -> button_right_s1_agent:m0_readdatavalid
	wire          button_right_s1_agent_m0_lock;                                                // button_right_s1_agent:m0_lock -> button_right_s1_translator:uav_lock
	wire   [31:0] button_right_s1_agent_m0_writedata;                                           // button_right_s1_agent:m0_writedata -> button_right_s1_translator:uav_writedata
	wire          button_right_s1_agent_m0_write;                                               // button_right_s1_agent:m0_write -> button_right_s1_translator:uav_write
	wire    [2:0] button_right_s1_agent_m0_burstcount;                                          // button_right_s1_agent:m0_burstcount -> button_right_s1_translator:uav_burstcount
	wire          button_right_s1_agent_rf_source_valid;                                        // button_right_s1_agent:rf_source_valid -> button_right_s1_agent_rsp_fifo:in_valid
	wire  [118:0] button_right_s1_agent_rf_source_data;                                         // button_right_s1_agent:rf_source_data -> button_right_s1_agent_rsp_fifo:in_data
	wire          button_right_s1_agent_rf_source_ready;                                        // button_right_s1_agent_rsp_fifo:in_ready -> button_right_s1_agent:rf_source_ready
	wire          button_right_s1_agent_rf_source_startofpacket;                                // button_right_s1_agent:rf_source_startofpacket -> button_right_s1_agent_rsp_fifo:in_startofpacket
	wire          button_right_s1_agent_rf_source_endofpacket;                                  // button_right_s1_agent:rf_source_endofpacket -> button_right_s1_agent_rsp_fifo:in_endofpacket
	wire          button_right_s1_agent_rsp_fifo_out_valid;                                     // button_right_s1_agent_rsp_fifo:out_valid -> button_right_s1_agent:rf_sink_valid
	wire  [118:0] button_right_s1_agent_rsp_fifo_out_data;                                      // button_right_s1_agent_rsp_fifo:out_data -> button_right_s1_agent:rf_sink_data
	wire          button_right_s1_agent_rsp_fifo_out_ready;                                     // button_right_s1_agent:rf_sink_ready -> button_right_s1_agent_rsp_fifo:out_ready
	wire          button_right_s1_agent_rsp_fifo_out_startofpacket;                             // button_right_s1_agent_rsp_fifo:out_startofpacket -> button_right_s1_agent:rf_sink_startofpacket
	wire          button_right_s1_agent_rsp_fifo_out_endofpacket;                               // button_right_s1_agent_rsp_fifo:out_endofpacket -> button_right_s1_agent:rf_sink_endofpacket
	wire          button_right_s1_agent_rdata_fifo_src_valid;                                   // button_right_s1_agent:rdata_fifo_src_valid -> button_right_s1_agent_rdata_fifo:in_valid
	wire   [33:0] button_right_s1_agent_rdata_fifo_src_data;                                    // button_right_s1_agent:rdata_fifo_src_data -> button_right_s1_agent_rdata_fifo:in_data
	wire          button_right_s1_agent_rdata_fifo_src_ready;                                   // button_right_s1_agent_rdata_fifo:in_ready -> button_right_s1_agent:rdata_fifo_src_ready
	wire   [31:0] reset_switch_s1_agent_m0_readdata;                                            // reset_switch_s1_translator:uav_readdata -> reset_switch_s1_agent:m0_readdata
	wire          reset_switch_s1_agent_m0_waitrequest;                                         // reset_switch_s1_translator:uav_waitrequest -> reset_switch_s1_agent:m0_waitrequest
	wire          reset_switch_s1_agent_m0_debugaccess;                                         // reset_switch_s1_agent:m0_debugaccess -> reset_switch_s1_translator:uav_debugaccess
	wire   [20:0] reset_switch_s1_agent_m0_address;                                             // reset_switch_s1_agent:m0_address -> reset_switch_s1_translator:uav_address
	wire    [3:0] reset_switch_s1_agent_m0_byteenable;                                          // reset_switch_s1_agent:m0_byteenable -> reset_switch_s1_translator:uav_byteenable
	wire          reset_switch_s1_agent_m0_read;                                                // reset_switch_s1_agent:m0_read -> reset_switch_s1_translator:uav_read
	wire          reset_switch_s1_agent_m0_readdatavalid;                                       // reset_switch_s1_translator:uav_readdatavalid -> reset_switch_s1_agent:m0_readdatavalid
	wire          reset_switch_s1_agent_m0_lock;                                                // reset_switch_s1_agent:m0_lock -> reset_switch_s1_translator:uav_lock
	wire   [31:0] reset_switch_s1_agent_m0_writedata;                                           // reset_switch_s1_agent:m0_writedata -> reset_switch_s1_translator:uav_writedata
	wire          reset_switch_s1_agent_m0_write;                                               // reset_switch_s1_agent:m0_write -> reset_switch_s1_translator:uav_write
	wire    [2:0] reset_switch_s1_agent_m0_burstcount;                                          // reset_switch_s1_agent:m0_burstcount -> reset_switch_s1_translator:uav_burstcount
	wire          reset_switch_s1_agent_rf_source_valid;                                        // reset_switch_s1_agent:rf_source_valid -> reset_switch_s1_agent_rsp_fifo:in_valid
	wire  [118:0] reset_switch_s1_agent_rf_source_data;                                         // reset_switch_s1_agent:rf_source_data -> reset_switch_s1_agent_rsp_fifo:in_data
	wire          reset_switch_s1_agent_rf_source_ready;                                        // reset_switch_s1_agent_rsp_fifo:in_ready -> reset_switch_s1_agent:rf_source_ready
	wire          reset_switch_s1_agent_rf_source_startofpacket;                                // reset_switch_s1_agent:rf_source_startofpacket -> reset_switch_s1_agent_rsp_fifo:in_startofpacket
	wire          reset_switch_s1_agent_rf_source_endofpacket;                                  // reset_switch_s1_agent:rf_source_endofpacket -> reset_switch_s1_agent_rsp_fifo:in_endofpacket
	wire          reset_switch_s1_agent_rsp_fifo_out_valid;                                     // reset_switch_s1_agent_rsp_fifo:out_valid -> reset_switch_s1_agent:rf_sink_valid
	wire  [118:0] reset_switch_s1_agent_rsp_fifo_out_data;                                      // reset_switch_s1_agent_rsp_fifo:out_data -> reset_switch_s1_agent:rf_sink_data
	wire          reset_switch_s1_agent_rsp_fifo_out_ready;                                     // reset_switch_s1_agent:rf_sink_ready -> reset_switch_s1_agent_rsp_fifo:out_ready
	wire          reset_switch_s1_agent_rsp_fifo_out_startofpacket;                             // reset_switch_s1_agent_rsp_fifo:out_startofpacket -> reset_switch_s1_agent:rf_sink_startofpacket
	wire          reset_switch_s1_agent_rsp_fifo_out_endofpacket;                               // reset_switch_s1_agent_rsp_fifo:out_endofpacket -> reset_switch_s1_agent:rf_sink_endofpacket
	wire          reset_switch_s1_agent_rdata_fifo_src_valid;                                   // reset_switch_s1_agent:rdata_fifo_src_valid -> reset_switch_s1_agent_rdata_fifo:in_valid
	wire   [33:0] reset_switch_s1_agent_rdata_fifo_src_data;                                    // reset_switch_s1_agent:rdata_fifo_src_data -> reset_switch_s1_agent_rdata_fifo:in_data
	wire          reset_switch_s1_agent_rdata_fifo_src_ready;                                   // reset_switch_s1_agent_rdata_fifo:in_ready -> reset_switch_s1_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                                 // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                                  // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                                 // router:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                         // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                           // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                                  // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                                   // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                                  // router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                          // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                            // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rp_valid;                      // de10_vga_raster_sprites_0_avalon_slave_0_agent:rp_valid -> router_002:sink_valid
	wire   [99:0] de10_vga_raster_sprites_0_avalon_slave_0_agent_rp_data;                       // de10_vga_raster_sprites_0_avalon_slave_0_agent:rp_data -> router_002:sink_data
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rp_ready;                      // router_002:sink_ready -> de10_vga_raster_sprites_0_avalon_slave_0_agent:rp_ready
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rp_startofpacket;              // de10_vga_raster_sprites_0_avalon_slave_0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rp_endofpacket;                // de10_vga_raster_sprites_0_avalon_slave_0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          hex0_s1_agent_rp_valid;                                                       // hex0_s1_agent:rp_valid -> router_003:sink_valid
	wire  [117:0] hex0_s1_agent_rp_data;                                                        // hex0_s1_agent:rp_data -> router_003:sink_data
	wire          hex0_s1_agent_rp_ready;                                                       // router_003:sink_ready -> hex0_s1_agent:rp_ready
	wire          hex0_s1_agent_rp_startofpacket;                                               // hex0_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          hex0_s1_agent_rp_endofpacket;                                                 // hex0_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                         // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [117:0] router_003_src_data;                                                          // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                         // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [8:0] router_003_src_channel;                                                       // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                 // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                   // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          hex1_s1_agent_rp_valid;                                                       // hex1_s1_agent:rp_valid -> router_004:sink_valid
	wire  [117:0] hex1_s1_agent_rp_data;                                                        // hex1_s1_agent:rp_data -> router_004:sink_data
	wire          hex1_s1_agent_rp_ready;                                                       // router_004:sink_ready -> hex1_s1_agent:rp_ready
	wire          hex1_s1_agent_rp_startofpacket;                                               // hex1_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          hex1_s1_agent_rp_endofpacket;                                                 // hex1_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                         // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [117:0] router_004_src_data;                                                          // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                         // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [8:0] router_004_src_channel;                                                       // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                 // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                   // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          hex2_s1_agent_rp_valid;                                                       // hex2_s1_agent:rp_valid -> router_005:sink_valid
	wire  [117:0] hex2_s1_agent_rp_data;                                                        // hex2_s1_agent:rp_data -> router_005:sink_data
	wire          hex2_s1_agent_rp_ready;                                                       // router_005:sink_ready -> hex2_s1_agent:rp_ready
	wire          hex2_s1_agent_rp_startofpacket;                                               // hex2_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          hex2_s1_agent_rp_endofpacket;                                                 // hex2_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                         // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [117:0] router_005_src_data;                                                          // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                         // rsp_demux_003:sink_ready -> router_005:src_ready
	wire    [8:0] router_005_src_channel;                                                       // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                 // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                   // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          button_up_s1_agent_rp_valid;                                                  // button_up_s1_agent:rp_valid -> router_006:sink_valid
	wire  [117:0] button_up_s1_agent_rp_data;                                                   // button_up_s1_agent:rp_data -> router_006:sink_data
	wire          button_up_s1_agent_rp_ready;                                                  // router_006:sink_ready -> button_up_s1_agent:rp_ready
	wire          button_up_s1_agent_rp_startofpacket;                                          // button_up_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          button_up_s1_agent_rp_endofpacket;                                            // button_up_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                         // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [117:0] router_006_src_data;                                                          // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                         // rsp_demux_004:sink_ready -> router_006:src_ready
	wire    [8:0] router_006_src_channel;                                                       // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                 // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                   // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          button_down_s1_agent_rp_valid;                                                // button_down_s1_agent:rp_valid -> router_007:sink_valid
	wire  [117:0] button_down_s1_agent_rp_data;                                                 // button_down_s1_agent:rp_data -> router_007:sink_data
	wire          button_down_s1_agent_rp_ready;                                                // router_007:sink_ready -> button_down_s1_agent:rp_ready
	wire          button_down_s1_agent_rp_startofpacket;                                        // button_down_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          button_down_s1_agent_rp_endofpacket;                                          // button_down_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                         // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [117:0] router_007_src_data;                                                          // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                         // rsp_demux_005:sink_ready -> router_007:src_ready
	wire    [8:0] router_007_src_channel;                                                       // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                 // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                   // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          button_left_s1_agent_rp_valid;                                                // button_left_s1_agent:rp_valid -> router_008:sink_valid
	wire  [117:0] button_left_s1_agent_rp_data;                                                 // button_left_s1_agent:rp_data -> router_008:sink_data
	wire          button_left_s1_agent_rp_ready;                                                // router_008:sink_ready -> button_left_s1_agent:rp_ready
	wire          button_left_s1_agent_rp_startofpacket;                                        // button_left_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          button_left_s1_agent_rp_endofpacket;                                          // button_left_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                         // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [117:0] router_008_src_data;                                                          // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                         // rsp_demux_006:sink_ready -> router_008:src_ready
	wire    [8:0] router_008_src_channel;                                                       // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                 // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                   // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          button_right_s1_agent_rp_valid;                                               // button_right_s1_agent:rp_valid -> router_009:sink_valid
	wire  [117:0] button_right_s1_agent_rp_data;                                                // button_right_s1_agent:rp_data -> router_009:sink_data
	wire          button_right_s1_agent_rp_ready;                                               // router_009:sink_ready -> button_right_s1_agent:rp_ready
	wire          button_right_s1_agent_rp_startofpacket;                                       // button_right_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          button_right_s1_agent_rp_endofpacket;                                         // button_right_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                         // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [117:0] router_009_src_data;                                                          // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                         // rsp_demux_007:sink_ready -> router_009:src_ready
	wire    [8:0] router_009_src_channel;                                                       // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                 // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                   // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          reset_switch_s1_agent_rp_valid;                                               // reset_switch_s1_agent:rp_valid -> router_010:sink_valid
	wire  [117:0] reset_switch_s1_agent_rp_data;                                                // reset_switch_s1_agent:rp_data -> router_010:sink_data
	wire          reset_switch_s1_agent_rp_ready;                                               // router_010:sink_ready -> reset_switch_s1_agent:rp_ready
	wire          reset_switch_s1_agent_rp_startofpacket;                                       // reset_switch_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          reset_switch_s1_agent_rp_endofpacket;                                         // reset_switch_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                         // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [117:0] router_010_src_data;                                                          // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                         // rsp_demux_008:sink_ready -> router_010:src_ready
	wire    [8:0] router_010_src_channel;                                                       // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                 // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                   // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_src_valid;                                                             // router:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [117:0] router_src_data;                                                              // router:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                             // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [8:0] router_src_channel;                                                           // router:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                     // router:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                       // router:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [117:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                              // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                             // cmd_demux:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire    [8:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                           // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                     // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                       // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                            // rsp_mux:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [117:0] rsp_mux_src_data;                                                             // rsp_mux:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                            // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [8:0] rsp_mux_src_channel;                                                          // rsp_mux:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                    // rsp_mux:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                      // rsp_mux:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                             // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                              // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                             // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire    [8:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                           // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                     // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                       // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                         // router_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [117:0] router_001_src_data;                                                          // router_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                         // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [8:0] router_001_src_channel;                                                       // router_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                 // router_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                   // router_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [117:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                              // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                             // cmd_demux_001:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire    [8:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                           // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                     // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                       // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                        // rsp_mux_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [117:0] rsp_mux_001_src_data;                                                         // rsp_mux_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                        // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [8:0] rsp_mux_001_src_channel;                                                      // rsp_mux_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                // rsp_mux_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                  // rsp_mux_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                             // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                              // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                             // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire    [8:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                           // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                     // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                       // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_valid;         // de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter:source0_valid -> de10_vga_raster_sprites_0_avalon_slave_0_agent:cp_valid
	wire   [99:0] de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_data;          // de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter:source0_data -> de10_vga_raster_sprites_0_avalon_slave_0_agent:cp_data
	wire          de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_ready;         // de10_vga_raster_sprites_0_avalon_slave_0_agent:cp_ready -> de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter:source0_ready
	wire    [8:0] de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_channel;       // de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter:source0_channel -> de10_vga_raster_sprites_0_avalon_slave_0_agent:cp_channel
	wire          de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_startofpacket; // de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter:source0_startofpacket -> de10_vga_raster_sprites_0_avalon_slave_0_agent:cp_startofpacket
	wire          de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_endofpacket;   // de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter:source0_endofpacket -> de10_vga_raster_sprites_0_avalon_slave_0_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                        // cmd_mux_001:src_valid -> hex0_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_001_src_data;                                                         // cmd_mux_001:src_data -> hex0_s1_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                        // hex0_s1_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [8:0] cmd_mux_001_src_channel;                                                      // cmd_mux_001:src_channel -> hex0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                // cmd_mux_001:src_startofpacket -> hex0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                  // cmd_mux_001:src_endofpacket -> hex0_s1_burst_adapter:sink0_endofpacket
	wire          hex0_s1_burst_adapter_source0_valid;                                          // hex0_s1_burst_adapter:source0_valid -> hex0_s1_agent:cp_valid
	wire  [117:0] hex0_s1_burst_adapter_source0_data;                                           // hex0_s1_burst_adapter:source0_data -> hex0_s1_agent:cp_data
	wire          hex0_s1_burst_adapter_source0_ready;                                          // hex0_s1_agent:cp_ready -> hex0_s1_burst_adapter:source0_ready
	wire    [8:0] hex0_s1_burst_adapter_source0_channel;                                        // hex0_s1_burst_adapter:source0_channel -> hex0_s1_agent:cp_channel
	wire          hex0_s1_burst_adapter_source0_startofpacket;                                  // hex0_s1_burst_adapter:source0_startofpacket -> hex0_s1_agent:cp_startofpacket
	wire          hex0_s1_burst_adapter_source0_endofpacket;                                    // hex0_s1_burst_adapter:source0_endofpacket -> hex0_s1_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                        // cmd_mux_002:src_valid -> hex1_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_002_src_data;                                                         // cmd_mux_002:src_data -> hex1_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                        // hex1_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [8:0] cmd_mux_002_src_channel;                                                      // cmd_mux_002:src_channel -> hex1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                // cmd_mux_002:src_startofpacket -> hex1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                  // cmd_mux_002:src_endofpacket -> hex1_s1_burst_adapter:sink0_endofpacket
	wire          hex1_s1_burst_adapter_source0_valid;                                          // hex1_s1_burst_adapter:source0_valid -> hex1_s1_agent:cp_valid
	wire  [117:0] hex1_s1_burst_adapter_source0_data;                                           // hex1_s1_burst_adapter:source0_data -> hex1_s1_agent:cp_data
	wire          hex1_s1_burst_adapter_source0_ready;                                          // hex1_s1_agent:cp_ready -> hex1_s1_burst_adapter:source0_ready
	wire    [8:0] hex1_s1_burst_adapter_source0_channel;                                        // hex1_s1_burst_adapter:source0_channel -> hex1_s1_agent:cp_channel
	wire          hex1_s1_burst_adapter_source0_startofpacket;                                  // hex1_s1_burst_adapter:source0_startofpacket -> hex1_s1_agent:cp_startofpacket
	wire          hex1_s1_burst_adapter_source0_endofpacket;                                    // hex1_s1_burst_adapter:source0_endofpacket -> hex1_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                        // cmd_mux_003:src_valid -> hex2_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_003_src_data;                                                         // cmd_mux_003:src_data -> hex2_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                        // hex2_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [8:0] cmd_mux_003_src_channel;                                                      // cmd_mux_003:src_channel -> hex2_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                // cmd_mux_003:src_startofpacket -> hex2_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                  // cmd_mux_003:src_endofpacket -> hex2_s1_burst_adapter:sink0_endofpacket
	wire          hex2_s1_burst_adapter_source0_valid;                                          // hex2_s1_burst_adapter:source0_valid -> hex2_s1_agent:cp_valid
	wire  [117:0] hex2_s1_burst_adapter_source0_data;                                           // hex2_s1_burst_adapter:source0_data -> hex2_s1_agent:cp_data
	wire          hex2_s1_burst_adapter_source0_ready;                                          // hex2_s1_agent:cp_ready -> hex2_s1_burst_adapter:source0_ready
	wire    [8:0] hex2_s1_burst_adapter_source0_channel;                                        // hex2_s1_burst_adapter:source0_channel -> hex2_s1_agent:cp_channel
	wire          hex2_s1_burst_adapter_source0_startofpacket;                                  // hex2_s1_burst_adapter:source0_startofpacket -> hex2_s1_agent:cp_startofpacket
	wire          hex2_s1_burst_adapter_source0_endofpacket;                                    // hex2_s1_burst_adapter:source0_endofpacket -> hex2_s1_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                        // cmd_mux_004:src_valid -> button_up_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_004_src_data;                                                         // cmd_mux_004:src_data -> button_up_s1_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                        // button_up_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire    [8:0] cmd_mux_004_src_channel;                                                      // cmd_mux_004:src_channel -> button_up_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                // cmd_mux_004:src_startofpacket -> button_up_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                  // cmd_mux_004:src_endofpacket -> button_up_s1_burst_adapter:sink0_endofpacket
	wire          button_up_s1_burst_adapter_source0_valid;                                     // button_up_s1_burst_adapter:source0_valid -> button_up_s1_agent:cp_valid
	wire  [117:0] button_up_s1_burst_adapter_source0_data;                                      // button_up_s1_burst_adapter:source0_data -> button_up_s1_agent:cp_data
	wire          button_up_s1_burst_adapter_source0_ready;                                     // button_up_s1_agent:cp_ready -> button_up_s1_burst_adapter:source0_ready
	wire    [8:0] button_up_s1_burst_adapter_source0_channel;                                   // button_up_s1_burst_adapter:source0_channel -> button_up_s1_agent:cp_channel
	wire          button_up_s1_burst_adapter_source0_startofpacket;                             // button_up_s1_burst_adapter:source0_startofpacket -> button_up_s1_agent:cp_startofpacket
	wire          button_up_s1_burst_adapter_source0_endofpacket;                               // button_up_s1_burst_adapter:source0_endofpacket -> button_up_s1_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                        // cmd_mux_005:src_valid -> button_down_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_005_src_data;                                                         // cmd_mux_005:src_data -> button_down_s1_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                        // button_down_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire    [8:0] cmd_mux_005_src_channel;                                                      // cmd_mux_005:src_channel -> button_down_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                // cmd_mux_005:src_startofpacket -> button_down_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                  // cmd_mux_005:src_endofpacket -> button_down_s1_burst_adapter:sink0_endofpacket
	wire          button_down_s1_burst_adapter_source0_valid;                                   // button_down_s1_burst_adapter:source0_valid -> button_down_s1_agent:cp_valid
	wire  [117:0] button_down_s1_burst_adapter_source0_data;                                    // button_down_s1_burst_adapter:source0_data -> button_down_s1_agent:cp_data
	wire          button_down_s1_burst_adapter_source0_ready;                                   // button_down_s1_agent:cp_ready -> button_down_s1_burst_adapter:source0_ready
	wire    [8:0] button_down_s1_burst_adapter_source0_channel;                                 // button_down_s1_burst_adapter:source0_channel -> button_down_s1_agent:cp_channel
	wire          button_down_s1_burst_adapter_source0_startofpacket;                           // button_down_s1_burst_adapter:source0_startofpacket -> button_down_s1_agent:cp_startofpacket
	wire          button_down_s1_burst_adapter_source0_endofpacket;                             // button_down_s1_burst_adapter:source0_endofpacket -> button_down_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                        // cmd_mux_006:src_valid -> button_left_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_006_src_data;                                                         // cmd_mux_006:src_data -> button_left_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                        // button_left_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire    [8:0] cmd_mux_006_src_channel;                                                      // cmd_mux_006:src_channel -> button_left_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                // cmd_mux_006:src_startofpacket -> button_left_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                  // cmd_mux_006:src_endofpacket -> button_left_s1_burst_adapter:sink0_endofpacket
	wire          button_left_s1_burst_adapter_source0_valid;                                   // button_left_s1_burst_adapter:source0_valid -> button_left_s1_agent:cp_valid
	wire  [117:0] button_left_s1_burst_adapter_source0_data;                                    // button_left_s1_burst_adapter:source0_data -> button_left_s1_agent:cp_data
	wire          button_left_s1_burst_adapter_source0_ready;                                   // button_left_s1_agent:cp_ready -> button_left_s1_burst_adapter:source0_ready
	wire    [8:0] button_left_s1_burst_adapter_source0_channel;                                 // button_left_s1_burst_adapter:source0_channel -> button_left_s1_agent:cp_channel
	wire          button_left_s1_burst_adapter_source0_startofpacket;                           // button_left_s1_burst_adapter:source0_startofpacket -> button_left_s1_agent:cp_startofpacket
	wire          button_left_s1_burst_adapter_source0_endofpacket;                             // button_left_s1_burst_adapter:source0_endofpacket -> button_left_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                        // cmd_mux_007:src_valid -> button_right_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_007_src_data;                                                         // cmd_mux_007:src_data -> button_right_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                        // button_right_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire    [8:0] cmd_mux_007_src_channel;                                                      // cmd_mux_007:src_channel -> button_right_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                // cmd_mux_007:src_startofpacket -> button_right_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                  // cmd_mux_007:src_endofpacket -> button_right_s1_burst_adapter:sink0_endofpacket
	wire          button_right_s1_burst_adapter_source0_valid;                                  // button_right_s1_burst_adapter:source0_valid -> button_right_s1_agent:cp_valid
	wire  [117:0] button_right_s1_burst_adapter_source0_data;                                   // button_right_s1_burst_adapter:source0_data -> button_right_s1_agent:cp_data
	wire          button_right_s1_burst_adapter_source0_ready;                                  // button_right_s1_agent:cp_ready -> button_right_s1_burst_adapter:source0_ready
	wire    [8:0] button_right_s1_burst_adapter_source0_channel;                                // button_right_s1_burst_adapter:source0_channel -> button_right_s1_agent:cp_channel
	wire          button_right_s1_burst_adapter_source0_startofpacket;                          // button_right_s1_burst_adapter:source0_startofpacket -> button_right_s1_agent:cp_startofpacket
	wire          button_right_s1_burst_adapter_source0_endofpacket;                            // button_right_s1_burst_adapter:source0_endofpacket -> button_right_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                        // cmd_mux_008:src_valid -> reset_switch_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_008_src_data;                                                         // cmd_mux_008:src_data -> reset_switch_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                        // reset_switch_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire    [8:0] cmd_mux_008_src_channel;                                                      // cmd_mux_008:src_channel -> reset_switch_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                // cmd_mux_008:src_startofpacket -> reset_switch_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                  // cmd_mux_008:src_endofpacket -> reset_switch_s1_burst_adapter:sink0_endofpacket
	wire          reset_switch_s1_burst_adapter_source0_valid;                                  // reset_switch_s1_burst_adapter:source0_valid -> reset_switch_s1_agent:cp_valid
	wire  [117:0] reset_switch_s1_burst_adapter_source0_data;                                   // reset_switch_s1_burst_adapter:source0_data -> reset_switch_s1_agent:cp_data
	wire          reset_switch_s1_burst_adapter_source0_ready;                                  // reset_switch_s1_agent:cp_ready -> reset_switch_s1_burst_adapter:source0_ready
	wire    [8:0] reset_switch_s1_burst_adapter_source0_channel;                                // reset_switch_s1_burst_adapter:source0_channel -> reset_switch_s1_agent:cp_channel
	wire          reset_switch_s1_burst_adapter_source0_startofpacket;                          // reset_switch_s1_burst_adapter:source0_startofpacket -> reset_switch_s1_agent:cp_startofpacket
	wire          reset_switch_s1_burst_adapter_source0_endofpacket;                            // reset_switch_s1_burst_adapter:source0_endofpacket -> reset_switch_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                         // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [117:0] cmd_demux_src0_data;                                                          // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                         // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [8:0] cmd_demux_src0_channel;                                                       // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                 // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                   // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                         // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [117:0] cmd_demux_src1_data;                                                          // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                         // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [8:0] cmd_demux_src1_channel;                                                       // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                 // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                   // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                         // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [117:0] cmd_demux_src2_data;                                                          // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                         // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [8:0] cmd_demux_src2_channel;                                                       // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                 // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                   // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                         // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [117:0] cmd_demux_src3_data;                                                          // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                         // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [8:0] cmd_demux_src3_channel;                                                       // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                 // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                   // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                         // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [117:0] cmd_demux_src4_data;                                                          // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                         // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [8:0] cmd_demux_src4_channel;                                                       // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                 // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                   // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                         // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [117:0] cmd_demux_src5_data;                                                          // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                         // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [8:0] cmd_demux_src5_channel;                                                       // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                 // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                   // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                         // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [117:0] cmd_demux_src6_data;                                                          // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                         // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire    [8:0] cmd_demux_src6_channel;                                                       // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                 // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                   // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                         // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [117:0] cmd_demux_src7_data;                                                          // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                         // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire    [8:0] cmd_demux_src7_channel;                                                       // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                 // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                   // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                         // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [117:0] cmd_demux_src8_data;                                                          // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                         // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire    [8:0] cmd_demux_src8_channel;                                                       // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                 // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                   // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                     // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [117:0] cmd_demux_001_src0_data;                                                      // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                     // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [8:0] cmd_demux_001_src0_channel;                                                   // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                             // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                               // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                     // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [117:0] cmd_demux_001_src1_data;                                                      // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                     // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [8:0] cmd_demux_001_src1_channel;                                                   // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                             // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                               // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                     // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [117:0] cmd_demux_001_src2_data;                                                      // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                     // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [8:0] cmd_demux_001_src2_channel;                                                   // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                             // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                               // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                     // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [117:0] cmd_demux_001_src3_data;                                                      // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                                     // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire    [8:0] cmd_demux_001_src3_channel;                                                   // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                             // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                               // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                     // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [117:0] cmd_demux_001_src4_data;                                                      // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                                     // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire    [8:0] cmd_demux_001_src4_channel;                                                   // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                             // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                               // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                     // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [117:0] cmd_demux_001_src5_data;                                                      // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                                     // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire    [8:0] cmd_demux_001_src5_channel;                                                   // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                             // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                               // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                     // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [117:0] cmd_demux_001_src6_data;                                                      // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                                     // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire    [8:0] cmd_demux_001_src6_channel;                                                   // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                             // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                               // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                     // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [117:0] cmd_demux_001_src7_data;                                                      // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                                     // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire    [8:0] cmd_demux_001_src7_channel;                                                   // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                             // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                               // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                                     // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [117:0] cmd_demux_001_src8_data;                                                      // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                                     // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire    [8:0] cmd_demux_001_src8_channel;                                                   // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                             // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                               // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                         // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [117:0] rsp_demux_src0_data;                                                          // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                         // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [8:0] rsp_demux_src0_channel;                                                       // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                 // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                   // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                         // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [117:0] rsp_demux_src1_data;                                                          // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                         // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [8:0] rsp_demux_src1_channel;                                                       // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                 // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                   // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                     // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [117:0] rsp_demux_001_src0_data;                                                      // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                     // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [8:0] rsp_demux_001_src0_channel;                                                   // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                             // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                               // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                     // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [117:0] rsp_demux_001_src1_data;                                                      // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                     // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [8:0] rsp_demux_001_src1_channel;                                                   // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                             // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                               // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                     // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [117:0] rsp_demux_002_src0_data;                                                      // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                     // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [8:0] rsp_demux_002_src0_channel;                                                   // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                             // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                               // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                     // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [117:0] rsp_demux_002_src1_data;                                                      // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                     // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [8:0] rsp_demux_002_src1_channel;                                                   // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                             // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                               // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                     // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [117:0] rsp_demux_003_src0_data;                                                      // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                     // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [8:0] rsp_demux_003_src0_channel;                                                   // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                             // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                               // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                     // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [117:0] rsp_demux_003_src1_data;                                                      // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                                     // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire    [8:0] rsp_demux_003_src1_channel;                                                   // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                             // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                               // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                     // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [117:0] rsp_demux_004_src0_data;                                                      // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                     // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [8:0] rsp_demux_004_src0_channel;                                                   // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                             // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                               // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                     // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [117:0] rsp_demux_004_src1_data;                                                      // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                                     // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire    [8:0] rsp_demux_004_src1_channel;                                                   // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                             // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                               // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                     // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [117:0] rsp_demux_005_src0_data;                                                      // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                     // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [8:0] rsp_demux_005_src0_channel;                                                   // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                             // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                               // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                     // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [117:0] rsp_demux_005_src1_data;                                                      // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                                     // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire    [8:0] rsp_demux_005_src1_channel;                                                   // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                             // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                               // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                     // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [117:0] rsp_demux_006_src0_data;                                                      // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                     // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire    [8:0] rsp_demux_006_src0_channel;                                                   // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                             // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                               // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                     // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [117:0] rsp_demux_006_src1_data;                                                      // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                                     // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire    [8:0] rsp_demux_006_src1_channel;                                                   // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                             // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                               // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                     // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [117:0] rsp_demux_007_src0_data;                                                      // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                     // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire    [8:0] rsp_demux_007_src0_channel;                                                   // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                             // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                               // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                     // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [117:0] rsp_demux_007_src1_data;                                                      // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                                     // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire    [8:0] rsp_demux_007_src1_channel;                                                   // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                                             // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                               // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                     // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [117:0] rsp_demux_008_src0_data;                                                      // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                     // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire    [8:0] rsp_demux_008_src0_channel;                                                   // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                             // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                               // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                     // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [117:0] rsp_demux_008_src1_data;                                                      // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                                     // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire    [8:0] rsp_demux_008_src1_channel;                                                   // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                                             // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                               // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          router_002_src_valid;                                                         // router_002:src_valid -> de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter:in_valid
	wire   [99:0] router_002_src_data;                                                          // router_002:src_data -> de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                         // de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [8:0] router_002_src_channel;                                                       // router_002:src_channel -> de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                 // router_002:src_startofpacket -> de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                   // router_002:src_endofpacket -> de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter:in_endofpacket
	wire          de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_valid;         // de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [117:0] de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_data;          // de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter:out_ready
	wire    [8:0] de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_channel;       // de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_startofpacket; // de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_endofpacket;   // de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                            // cmd_mux:src_valid -> de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter:in_valid
	wire  [117:0] cmd_mux_src_data;                                                             // cmd_mux:src_data -> de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                            // de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [8:0] cmd_mux_src_channel;                                                          // cmd_mux:src_channel -> de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                    // cmd_mux:src_startofpacket -> de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                      // cmd_mux:src_endofpacket -> de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter:in_endofpacket
	wire          de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_valid;         // de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter:out_valid -> de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter:sink0_valid
	wire   [99:0] de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_data;          // de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter:out_data -> de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter:sink0_data
	wire          de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_ready;         // de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter:sink0_ready -> de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter:out_ready
	wire    [8:0] de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_channel;       // de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter:out_channel -> de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter:sink0_channel
	wire          de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_startofpacket; // de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter:out_startofpacket -> de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire          de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_endofpacket;   // de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter:out_endofpacket -> de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire    [8:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                            // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [8:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                            // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_out_valid;          // de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_out_data;           // de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_out_ready;          // avalon_st_adapter:in_0_ready -> de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                // avalon_st_adapter:out_0_valid -> de10_vga_raster_sprites_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                                 // avalon_st_adapter:out_0_data -> de10_vga_raster_sprites_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                // de10_vga_raster_sprites_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                // avalon_st_adapter:out_0_error -> de10_vga_raster_sprites_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          hex0_s1_agent_rdata_fifo_out_valid;                                           // hex0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] hex0_s1_agent_rdata_fifo_out_data;                                            // hex0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          hex0_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_001:in_0_ready -> hex0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                            // avalon_st_adapter_001:out_0_valid -> hex0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                             // avalon_st_adapter_001:out_0_data -> hex0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                            // hex0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                            // avalon_st_adapter_001:out_0_error -> hex0_s1_agent:rdata_fifo_sink_error
	wire          hex1_s1_agent_rdata_fifo_out_valid;                                           // hex1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] hex1_s1_agent_rdata_fifo_out_data;                                            // hex1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          hex1_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_002:in_0_ready -> hex1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                            // avalon_st_adapter_002:out_0_valid -> hex1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                             // avalon_st_adapter_002:out_0_data -> hex1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                            // hex1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                            // avalon_st_adapter_002:out_0_error -> hex1_s1_agent:rdata_fifo_sink_error
	wire          hex2_s1_agent_rdata_fifo_out_valid;                                           // hex2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] hex2_s1_agent_rdata_fifo_out_data;                                            // hex2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          hex2_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_003:in_0_ready -> hex2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                            // avalon_st_adapter_003:out_0_valid -> hex2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                             // avalon_st_adapter_003:out_0_data -> hex2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                            // hex2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                            // avalon_st_adapter_003:out_0_error -> hex2_s1_agent:rdata_fifo_sink_error
	wire          button_up_s1_agent_rdata_fifo_out_valid;                                      // button_up_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] button_up_s1_agent_rdata_fifo_out_data;                                       // button_up_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          button_up_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_004:in_0_ready -> button_up_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                            // avalon_st_adapter_004:out_0_valid -> button_up_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                             // avalon_st_adapter_004:out_0_data -> button_up_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                            // button_up_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                            // avalon_st_adapter_004:out_0_error -> button_up_s1_agent:rdata_fifo_sink_error
	wire          button_down_s1_agent_rdata_fifo_out_valid;                                    // button_down_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] button_down_s1_agent_rdata_fifo_out_data;                                     // button_down_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          button_down_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_005:in_0_ready -> button_down_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                            // avalon_st_adapter_005:out_0_valid -> button_down_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                             // avalon_st_adapter_005:out_0_data -> button_down_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                            // button_down_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                            // avalon_st_adapter_005:out_0_error -> button_down_s1_agent:rdata_fifo_sink_error
	wire          button_left_s1_agent_rdata_fifo_out_valid;                                    // button_left_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] button_left_s1_agent_rdata_fifo_out_data;                                     // button_left_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          button_left_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_006:in_0_ready -> button_left_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                            // avalon_st_adapter_006:out_0_valid -> button_left_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                             // avalon_st_adapter_006:out_0_data -> button_left_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                            // button_left_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                            // avalon_st_adapter_006:out_0_error -> button_left_s1_agent:rdata_fifo_sink_error
	wire          button_right_s1_agent_rdata_fifo_out_valid;                                   // button_right_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] button_right_s1_agent_rdata_fifo_out_data;                                    // button_right_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          button_right_s1_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_007:in_0_ready -> button_right_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                            // avalon_st_adapter_007:out_0_valid -> button_right_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                             // avalon_st_adapter_007:out_0_data -> button_right_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                            // button_right_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                            // avalon_st_adapter_007:out_0_error -> button_right_s1_agent:rdata_fifo_sink_error
	wire          reset_switch_s1_agent_rdata_fifo_out_valid;                                   // reset_switch_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] reset_switch_s1_agent_rdata_fifo_out_data;                                    // reset_switch_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          reset_switch_s1_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_008:in_0_ready -> reset_switch_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                            // avalon_st_adapter_008:out_0_valid -> reset_switch_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                             // avalon_st_adapter_008:out_0_data -> reset_switch_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                            // reset_switch_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                            // avalon_st_adapter_008:out_0_error -> reset_switch_s1_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) de10_vga_raster_sprites_0_avalon_slave_0_translator (
		.clk                    (clk_0_clk_clk),                                                   //                      clk.clk
		.reset                  (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (de10_vga_raster_sprites_0_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (de10_vga_raster_sprites_0_avalon_slave_0_write),                  //                         .write
		.av_read                (de10_vga_raster_sprites_0_avalon_slave_0_read),                   //                         .read
		.av_readdata            (de10_vga_raster_sprites_0_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (de10_vga_raster_sprites_0_avalon_slave_0_writedata),              //                         .writedata
		.av_chipselect          (de10_vga_raster_sprites_0_avalon_slave_0_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex0_s1_translator (
		.clk                    (clk_0_clk_clk),                                               //                      clk.clk
		.reset                  (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex0_s1_agent_m0_address),                                    // avalon_universal_slave_0.address
		.uav_burstcount         (hex0_s1_agent_m0_burstcount),                                 //                         .burstcount
		.uav_read               (hex0_s1_agent_m0_read),                                       //                         .read
		.uav_write              (hex0_s1_agent_m0_write),                                      //                         .write
		.uav_waitrequest        (hex0_s1_agent_m0_waitrequest),                                //                         .waitrequest
		.uav_readdatavalid      (hex0_s1_agent_m0_readdatavalid),                              //                         .readdatavalid
		.uav_byteenable         (hex0_s1_agent_m0_byteenable),                                 //                         .byteenable
		.uav_readdata           (hex0_s1_agent_m0_readdata),                                   //                         .readdata
		.uav_writedata          (hex0_s1_agent_m0_writedata),                                  //                         .writedata
		.uav_lock               (hex0_s1_agent_m0_lock),                                       //                         .lock
		.uav_debugaccess        (hex0_s1_agent_m0_debugaccess),                                //                         .debugaccess
		.av_address             (hex0_s1_address),                                             //      avalon_anti_slave_0.address
		.av_write               (hex0_s1_write),                                               //                         .write
		.av_readdata            (hex0_s1_readdata),                                            //                         .readdata
		.av_writedata           (hex0_s1_writedata),                                           //                         .writedata
		.av_chipselect          (hex0_s1_chipselect),                                          //                         .chipselect
		.av_read                (),                                                            //              (terminated)
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_waitrequest         (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex1_s1_translator (
		.clk                    (clk_0_clk_clk),                                               //                      clk.clk
		.reset                  (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex1_s1_agent_m0_address),                                    // avalon_universal_slave_0.address
		.uav_burstcount         (hex1_s1_agent_m0_burstcount),                                 //                         .burstcount
		.uav_read               (hex1_s1_agent_m0_read),                                       //                         .read
		.uav_write              (hex1_s1_agent_m0_write),                                      //                         .write
		.uav_waitrequest        (hex1_s1_agent_m0_waitrequest),                                //                         .waitrequest
		.uav_readdatavalid      (hex1_s1_agent_m0_readdatavalid),                              //                         .readdatavalid
		.uav_byteenable         (hex1_s1_agent_m0_byteenable),                                 //                         .byteenable
		.uav_readdata           (hex1_s1_agent_m0_readdata),                                   //                         .readdata
		.uav_writedata          (hex1_s1_agent_m0_writedata),                                  //                         .writedata
		.uav_lock               (hex1_s1_agent_m0_lock),                                       //                         .lock
		.uav_debugaccess        (hex1_s1_agent_m0_debugaccess),                                //                         .debugaccess
		.av_address             (hex1_s1_address),                                             //      avalon_anti_slave_0.address
		.av_write               (hex1_s1_write),                                               //                         .write
		.av_readdata            (hex1_s1_readdata),                                            //                         .readdata
		.av_writedata           (hex1_s1_writedata),                                           //                         .writedata
		.av_chipselect          (hex1_s1_chipselect),                                          //                         .chipselect
		.av_read                (),                                                            //              (terminated)
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_waitrequest         (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex2_s1_translator (
		.clk                    (clk_0_clk_clk),                                               //                      clk.clk
		.reset                  (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex2_s1_agent_m0_address),                                    // avalon_universal_slave_0.address
		.uav_burstcount         (hex2_s1_agent_m0_burstcount),                                 //                         .burstcount
		.uav_read               (hex2_s1_agent_m0_read),                                       //                         .read
		.uav_write              (hex2_s1_agent_m0_write),                                      //                         .write
		.uav_waitrequest        (hex2_s1_agent_m0_waitrequest),                                //                         .waitrequest
		.uav_readdatavalid      (hex2_s1_agent_m0_readdatavalid),                              //                         .readdatavalid
		.uav_byteenable         (hex2_s1_agent_m0_byteenable),                                 //                         .byteenable
		.uav_readdata           (hex2_s1_agent_m0_readdata),                                   //                         .readdata
		.uav_writedata          (hex2_s1_agent_m0_writedata),                                  //                         .writedata
		.uav_lock               (hex2_s1_agent_m0_lock),                                       //                         .lock
		.uav_debugaccess        (hex2_s1_agent_m0_debugaccess),                                //                         .debugaccess
		.av_address             (hex2_s1_address),                                             //      avalon_anti_slave_0.address
		.av_write               (hex2_s1_write),                                               //                         .write
		.av_readdata            (hex2_s1_readdata),                                            //                         .readdata
		.av_writedata           (hex2_s1_writedata),                                           //                         .writedata
		.av_chipselect          (hex2_s1_chipselect),                                          //                         .chipselect
		.av_read                (),                                                            //              (terminated)
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_waitrequest         (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_up_s1_translator (
		.clk                    (clk_0_clk_clk),                                               //                      clk.clk
		.reset                  (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_up_s1_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (button_up_s1_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (button_up_s1_agent_m0_read),                                  //                         .read
		.uav_write              (button_up_s1_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (button_up_s1_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (button_up_s1_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (button_up_s1_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (button_up_s1_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (button_up_s1_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (button_up_s1_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (button_up_s1_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (button_up_s1_address),                                        //      avalon_anti_slave_0.address
		.av_readdata            (button_up_s1_readdata),                                       //                         .readdata
		.av_write               (),                                                            //              (terminated)
		.av_read                (),                                                            //              (terminated)
		.av_writedata           (),                                                            //              (terminated)
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_waitrequest         (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_down_s1_translator (
		.clk                    (clk_0_clk_clk),                                               //                      clk.clk
		.reset                  (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_down_s1_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (button_down_s1_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (button_down_s1_agent_m0_read),                                //                         .read
		.uav_write              (button_down_s1_agent_m0_write),                               //                         .write
		.uav_waitrequest        (button_down_s1_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (button_down_s1_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (button_down_s1_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (button_down_s1_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (button_down_s1_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (button_down_s1_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (button_down_s1_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (button_down_s1_address),                                      //      avalon_anti_slave_0.address
		.av_readdata            (button_down_s1_readdata),                                     //                         .readdata
		.av_write               (),                                                            //              (terminated)
		.av_read                (),                                                            //              (terminated)
		.av_writedata           (),                                                            //              (terminated)
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_waitrequest         (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_left_s1_translator (
		.clk                    (clk_0_clk_clk),                                               //                      clk.clk
		.reset                  (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_left_s1_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (button_left_s1_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (button_left_s1_agent_m0_read),                                //                         .read
		.uav_write              (button_left_s1_agent_m0_write),                               //                         .write
		.uav_waitrequest        (button_left_s1_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (button_left_s1_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (button_left_s1_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (button_left_s1_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (button_left_s1_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (button_left_s1_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (button_left_s1_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (button_left_s1_address),                                      //      avalon_anti_slave_0.address
		.av_readdata            (button_left_s1_readdata),                                     //                         .readdata
		.av_write               (),                                                            //              (terminated)
		.av_read                (),                                                            //              (terminated)
		.av_writedata           (),                                                            //              (terminated)
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_waitrequest         (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_right_s1_translator (
		.clk                    (clk_0_clk_clk),                                               //                      clk.clk
		.reset                  (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_right_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (button_right_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (button_right_s1_agent_m0_read),                               //                         .read
		.uav_write              (button_right_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (button_right_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (button_right_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (button_right_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (button_right_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (button_right_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (button_right_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (button_right_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (button_right_s1_address),                                     //      avalon_anti_slave_0.address
		.av_readdata            (button_right_s1_readdata),                                    //                         .readdata
		.av_write               (),                                                            //              (terminated)
		.av_read                (),                                                            //              (terminated)
		.av_writedata           (),                                                            //              (terminated)
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_waitrequest         (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) reset_switch_s1_translator (
		.clk                    (clk_0_clk_clk),                                               //                      clk.clk
		.reset                  (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (reset_switch_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (reset_switch_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (reset_switch_s1_agent_m0_read),                               //                         .read
		.uav_write              (reset_switch_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (reset_switch_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (reset_switch_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (reset_switch_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (reset_switch_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (reset_switch_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (reset_switch_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (reset_switch_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (reset_switch_s1_address),                                     //      avalon_anti_slave_0.address
		.av_readdata            (reset_switch_s1_readdata),                                    //                         .readdata
		.av_write               (),                                                            //              (terminated)
		.av_read                (),                                                            //              (terminated)
		.av_writedata           (),                                                            //              (terminated)
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_waitrequest         (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (94),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                        //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (61),
		.PKT_BURST_SIZE_L          (59),
		.PKT_TRANS_LOCK            (43),
		.PKT_BEGIN_BURST           (66),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (58),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (45),
		.PKT_ADDR_H                (38),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (39),
		.PKT_TRANS_POSTED          (40),
		.PKT_TRANS_WRITE           (41),
		.PKT_TRANS_READ            (42),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (71),
		.PKT_SRC_ID_L              (68),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (72),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) de10_vga_raster_sprites_0_avalon_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                //             clk.clk
		.reset                   (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (de10_vga_raster_sprites_0_avalon_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (de10_vga_raster_sprites_0_avalon_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (de10_vga_raster_sprites_0_avalon_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (de10_vga_raster_sprites_0_avalon_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (de10_vga_raster_sprites_0_avalon_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (de10_vga_raster_sprites_0_avalon_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (de10_vga_raster_sprites_0_avalon_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (de10_vga_raster_sprites_0_avalon_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (de10_vga_raster_sprites_0_avalon_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (de10_vga_raster_sprites_0_avalon_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (de10_vga_raster_sprites_0_avalon_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                                //                .error
		.rdata_fifo_src_ready    (de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                             //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (de10_vga_raster_sprites_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (de10_vga_raster_sprites_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (de10_vga_raster_sprites_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (de10_vga_raster_sprites_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (de10_vga_raster_sprites_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (de10_vga_raster_sprites_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                       //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                                // (terminated)
		.in_endofpacket    (1'b0),                                                                // (terminated)
		.out_startofpacket (),                                                                    // (terminated)
		.out_endofpacket   (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex0_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hex0_s1_agent_m0_address),                                    //              m0.address
		.m0_burstcount           (hex0_s1_agent_m0_burstcount),                                 //                .burstcount
		.m0_byteenable           (hex0_s1_agent_m0_byteenable),                                 //                .byteenable
		.m0_debugaccess          (hex0_s1_agent_m0_debugaccess),                                //                .debugaccess
		.m0_lock                 (hex0_s1_agent_m0_lock),                                       //                .lock
		.m0_readdata             (hex0_s1_agent_m0_readdata),                                   //                .readdata
		.m0_readdatavalid        (hex0_s1_agent_m0_readdatavalid),                              //                .readdatavalid
		.m0_read                 (hex0_s1_agent_m0_read),                                       //                .read
		.m0_waitrequest          (hex0_s1_agent_m0_waitrequest),                                //                .waitrequest
		.m0_writedata            (hex0_s1_agent_m0_writedata),                                  //                .writedata
		.m0_write                (hex0_s1_agent_m0_write),                                      //                .write
		.rp_endofpacket          (hex0_s1_agent_rp_endofpacket),                                //              rp.endofpacket
		.rp_ready                (hex0_s1_agent_rp_ready),                                      //                .ready
		.rp_valid                (hex0_s1_agent_rp_valid),                                      //                .valid
		.rp_data                 (hex0_s1_agent_rp_data),                                       //                .data
		.rp_startofpacket        (hex0_s1_agent_rp_startofpacket),                              //                .startofpacket
		.cp_ready                (hex0_s1_burst_adapter_source0_ready),                         //              cp.ready
		.cp_valid                (hex0_s1_burst_adapter_source0_valid),                         //                .valid
		.cp_data                 (hex0_s1_burst_adapter_source0_data),                          //                .data
		.cp_startofpacket        (hex0_s1_burst_adapter_source0_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (hex0_s1_burst_adapter_source0_endofpacket),                   //                .endofpacket
		.cp_channel              (hex0_s1_burst_adapter_source0_channel),                       //                .channel
		.rf_sink_ready           (hex0_s1_agent_rsp_fifo_out_ready),                            //         rf_sink.ready
		.rf_sink_valid           (hex0_s1_agent_rsp_fifo_out_valid),                            //                .valid
		.rf_sink_startofpacket   (hex0_s1_agent_rsp_fifo_out_startofpacket),                    //                .startofpacket
		.rf_sink_endofpacket     (hex0_s1_agent_rsp_fifo_out_endofpacket),                      //                .endofpacket
		.rf_sink_data            (hex0_s1_agent_rsp_fifo_out_data),                             //                .data
		.rf_source_ready         (hex0_s1_agent_rf_source_ready),                               //       rf_source.ready
		.rf_source_valid         (hex0_s1_agent_rf_source_valid),                               //                .valid
		.rf_source_startofpacket (hex0_s1_agent_rf_source_startofpacket),                       //                .startofpacket
		.rf_source_endofpacket   (hex0_s1_agent_rf_source_endofpacket),                         //                .endofpacket
		.rf_source_data          (hex0_s1_agent_rf_source_data),                                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (hex0_s1_agent_rdata_fifo_src_ready),                          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex0_s1_agent_rdata_fifo_src_valid),                          //                .valid
		.rdata_fifo_src_data     (hex0_s1_agent_rdata_fifo_src_data),                           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex0_s1_agent_rf_source_data),                                //        in.data
		.in_valid          (hex0_s1_agent_rf_source_valid),                               //          .valid
		.in_ready          (hex0_s1_agent_rf_source_ready),                               //          .ready
		.in_startofpacket  (hex0_s1_agent_rf_source_startofpacket),                       //          .startofpacket
		.in_endofpacket    (hex0_s1_agent_rf_source_endofpacket),                         //          .endofpacket
		.out_data          (hex0_s1_agent_rsp_fifo_out_data),                             //       out.data
		.out_valid         (hex0_s1_agent_rsp_fifo_out_valid),                            //          .valid
		.out_ready         (hex0_s1_agent_rsp_fifo_out_ready),                            //          .ready
		.out_startofpacket (hex0_s1_agent_rsp_fifo_out_startofpacket),                    //          .startofpacket
		.out_endofpacket   (hex0_s1_agent_rsp_fifo_out_endofpacket),                      //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex0_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex0_s1_agent_rdata_fifo_src_data),                           //        in.data
		.in_valid          (hex0_s1_agent_rdata_fifo_src_valid),                          //          .valid
		.in_ready          (hex0_s1_agent_rdata_fifo_src_ready),                          //          .ready
		.out_data          (hex0_s1_agent_rdata_fifo_out_data),                           //       out.data
		.out_valid         (hex0_s1_agent_rdata_fifo_out_valid),                          //          .valid
		.out_ready         (hex0_s1_agent_rdata_fifo_out_ready),                          //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex1_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hex1_s1_agent_m0_address),                                    //              m0.address
		.m0_burstcount           (hex1_s1_agent_m0_burstcount),                                 //                .burstcount
		.m0_byteenable           (hex1_s1_agent_m0_byteenable),                                 //                .byteenable
		.m0_debugaccess          (hex1_s1_agent_m0_debugaccess),                                //                .debugaccess
		.m0_lock                 (hex1_s1_agent_m0_lock),                                       //                .lock
		.m0_readdata             (hex1_s1_agent_m0_readdata),                                   //                .readdata
		.m0_readdatavalid        (hex1_s1_agent_m0_readdatavalid),                              //                .readdatavalid
		.m0_read                 (hex1_s1_agent_m0_read),                                       //                .read
		.m0_waitrequest          (hex1_s1_agent_m0_waitrequest),                                //                .waitrequest
		.m0_writedata            (hex1_s1_agent_m0_writedata),                                  //                .writedata
		.m0_write                (hex1_s1_agent_m0_write),                                      //                .write
		.rp_endofpacket          (hex1_s1_agent_rp_endofpacket),                                //              rp.endofpacket
		.rp_ready                (hex1_s1_agent_rp_ready),                                      //                .ready
		.rp_valid                (hex1_s1_agent_rp_valid),                                      //                .valid
		.rp_data                 (hex1_s1_agent_rp_data),                                       //                .data
		.rp_startofpacket        (hex1_s1_agent_rp_startofpacket),                              //                .startofpacket
		.cp_ready                (hex1_s1_burst_adapter_source0_ready),                         //              cp.ready
		.cp_valid                (hex1_s1_burst_adapter_source0_valid),                         //                .valid
		.cp_data                 (hex1_s1_burst_adapter_source0_data),                          //                .data
		.cp_startofpacket        (hex1_s1_burst_adapter_source0_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (hex1_s1_burst_adapter_source0_endofpacket),                   //                .endofpacket
		.cp_channel              (hex1_s1_burst_adapter_source0_channel),                       //                .channel
		.rf_sink_ready           (hex1_s1_agent_rsp_fifo_out_ready),                            //         rf_sink.ready
		.rf_sink_valid           (hex1_s1_agent_rsp_fifo_out_valid),                            //                .valid
		.rf_sink_startofpacket   (hex1_s1_agent_rsp_fifo_out_startofpacket),                    //                .startofpacket
		.rf_sink_endofpacket     (hex1_s1_agent_rsp_fifo_out_endofpacket),                      //                .endofpacket
		.rf_sink_data            (hex1_s1_agent_rsp_fifo_out_data),                             //                .data
		.rf_source_ready         (hex1_s1_agent_rf_source_ready),                               //       rf_source.ready
		.rf_source_valid         (hex1_s1_agent_rf_source_valid),                               //                .valid
		.rf_source_startofpacket (hex1_s1_agent_rf_source_startofpacket),                       //                .startofpacket
		.rf_source_endofpacket   (hex1_s1_agent_rf_source_endofpacket),                         //                .endofpacket
		.rf_source_data          (hex1_s1_agent_rf_source_data),                                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (hex1_s1_agent_rdata_fifo_src_ready),                          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex1_s1_agent_rdata_fifo_src_valid),                          //                .valid
		.rdata_fifo_src_data     (hex1_s1_agent_rdata_fifo_src_data),                           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex1_s1_agent_rf_source_data),                                //        in.data
		.in_valid          (hex1_s1_agent_rf_source_valid),                               //          .valid
		.in_ready          (hex1_s1_agent_rf_source_ready),                               //          .ready
		.in_startofpacket  (hex1_s1_agent_rf_source_startofpacket),                       //          .startofpacket
		.in_endofpacket    (hex1_s1_agent_rf_source_endofpacket),                         //          .endofpacket
		.out_data          (hex1_s1_agent_rsp_fifo_out_data),                             //       out.data
		.out_valid         (hex1_s1_agent_rsp_fifo_out_valid),                            //          .valid
		.out_ready         (hex1_s1_agent_rsp_fifo_out_ready),                            //          .ready
		.out_startofpacket (hex1_s1_agent_rsp_fifo_out_startofpacket),                    //          .startofpacket
		.out_endofpacket   (hex1_s1_agent_rsp_fifo_out_endofpacket),                      //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex1_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex1_s1_agent_rdata_fifo_src_data),                           //        in.data
		.in_valid          (hex1_s1_agent_rdata_fifo_src_valid),                          //          .valid
		.in_ready          (hex1_s1_agent_rdata_fifo_src_ready),                          //          .ready
		.out_data          (hex1_s1_agent_rdata_fifo_out_data),                           //       out.data
		.out_valid         (hex1_s1_agent_rdata_fifo_out_valid),                          //          .valid
		.out_ready         (hex1_s1_agent_rdata_fifo_out_ready),                          //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex2_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hex2_s1_agent_m0_address),                                    //              m0.address
		.m0_burstcount           (hex2_s1_agent_m0_burstcount),                                 //                .burstcount
		.m0_byteenable           (hex2_s1_agent_m0_byteenable),                                 //                .byteenable
		.m0_debugaccess          (hex2_s1_agent_m0_debugaccess),                                //                .debugaccess
		.m0_lock                 (hex2_s1_agent_m0_lock),                                       //                .lock
		.m0_readdata             (hex2_s1_agent_m0_readdata),                                   //                .readdata
		.m0_readdatavalid        (hex2_s1_agent_m0_readdatavalid),                              //                .readdatavalid
		.m0_read                 (hex2_s1_agent_m0_read),                                       //                .read
		.m0_waitrequest          (hex2_s1_agent_m0_waitrequest),                                //                .waitrequest
		.m0_writedata            (hex2_s1_agent_m0_writedata),                                  //                .writedata
		.m0_write                (hex2_s1_agent_m0_write),                                      //                .write
		.rp_endofpacket          (hex2_s1_agent_rp_endofpacket),                                //              rp.endofpacket
		.rp_ready                (hex2_s1_agent_rp_ready),                                      //                .ready
		.rp_valid                (hex2_s1_agent_rp_valid),                                      //                .valid
		.rp_data                 (hex2_s1_agent_rp_data),                                       //                .data
		.rp_startofpacket        (hex2_s1_agent_rp_startofpacket),                              //                .startofpacket
		.cp_ready                (hex2_s1_burst_adapter_source0_ready),                         //              cp.ready
		.cp_valid                (hex2_s1_burst_adapter_source0_valid),                         //                .valid
		.cp_data                 (hex2_s1_burst_adapter_source0_data),                          //                .data
		.cp_startofpacket        (hex2_s1_burst_adapter_source0_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (hex2_s1_burst_adapter_source0_endofpacket),                   //                .endofpacket
		.cp_channel              (hex2_s1_burst_adapter_source0_channel),                       //                .channel
		.rf_sink_ready           (hex2_s1_agent_rsp_fifo_out_ready),                            //         rf_sink.ready
		.rf_sink_valid           (hex2_s1_agent_rsp_fifo_out_valid),                            //                .valid
		.rf_sink_startofpacket   (hex2_s1_agent_rsp_fifo_out_startofpacket),                    //                .startofpacket
		.rf_sink_endofpacket     (hex2_s1_agent_rsp_fifo_out_endofpacket),                      //                .endofpacket
		.rf_sink_data            (hex2_s1_agent_rsp_fifo_out_data),                             //                .data
		.rf_source_ready         (hex2_s1_agent_rf_source_ready),                               //       rf_source.ready
		.rf_source_valid         (hex2_s1_agent_rf_source_valid),                               //                .valid
		.rf_source_startofpacket (hex2_s1_agent_rf_source_startofpacket),                       //                .startofpacket
		.rf_source_endofpacket   (hex2_s1_agent_rf_source_endofpacket),                         //                .endofpacket
		.rf_source_data          (hex2_s1_agent_rf_source_data),                                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (hex2_s1_agent_rdata_fifo_src_ready),                          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex2_s1_agent_rdata_fifo_src_valid),                          //                .valid
		.rdata_fifo_src_data     (hex2_s1_agent_rdata_fifo_src_data),                           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex2_s1_agent_rf_source_data),                                //        in.data
		.in_valid          (hex2_s1_agent_rf_source_valid),                               //          .valid
		.in_ready          (hex2_s1_agent_rf_source_ready),                               //          .ready
		.in_startofpacket  (hex2_s1_agent_rf_source_startofpacket),                       //          .startofpacket
		.in_endofpacket    (hex2_s1_agent_rf_source_endofpacket),                         //          .endofpacket
		.out_data          (hex2_s1_agent_rsp_fifo_out_data),                             //       out.data
		.out_valid         (hex2_s1_agent_rsp_fifo_out_valid),                            //          .valid
		.out_ready         (hex2_s1_agent_rsp_fifo_out_ready),                            //          .ready
		.out_startofpacket (hex2_s1_agent_rsp_fifo_out_startofpacket),                    //          .startofpacket
		.out_endofpacket   (hex2_s1_agent_rsp_fifo_out_endofpacket),                      //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex2_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex2_s1_agent_rdata_fifo_src_data),                           //        in.data
		.in_valid          (hex2_s1_agent_rdata_fifo_src_valid),                          //          .valid
		.in_ready          (hex2_s1_agent_rdata_fifo_src_ready),                          //          .ready
		.out_data          (hex2_s1_agent_rdata_fifo_out_data),                           //       out.data
		.out_valid         (hex2_s1_agent_rdata_fifo_out_valid),                          //          .valid
		.out_ready         (hex2_s1_agent_rdata_fifo_out_ready),                          //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_up_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (button_up_s1_agent_m0_address),                               //              m0.address
		.m0_burstcount           (button_up_s1_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (button_up_s1_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (button_up_s1_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (button_up_s1_agent_m0_lock),                                  //                .lock
		.m0_readdata             (button_up_s1_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (button_up_s1_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (button_up_s1_agent_m0_read),                                  //                .read
		.m0_waitrequest          (button_up_s1_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (button_up_s1_agent_m0_writedata),                             //                .writedata
		.m0_write                (button_up_s1_agent_m0_write),                                 //                .write
		.rp_endofpacket          (button_up_s1_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (button_up_s1_agent_rp_ready),                                 //                .ready
		.rp_valid                (button_up_s1_agent_rp_valid),                                 //                .valid
		.rp_data                 (button_up_s1_agent_rp_data),                                  //                .data
		.rp_startofpacket        (button_up_s1_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (button_up_s1_burst_adapter_source0_ready),                    //              cp.ready
		.cp_valid                (button_up_s1_burst_adapter_source0_valid),                    //                .valid
		.cp_data                 (button_up_s1_burst_adapter_source0_data),                     //                .data
		.cp_startofpacket        (button_up_s1_burst_adapter_source0_startofpacket),            //                .startofpacket
		.cp_endofpacket          (button_up_s1_burst_adapter_source0_endofpacket),              //                .endofpacket
		.cp_channel              (button_up_s1_burst_adapter_source0_channel),                  //                .channel
		.rf_sink_ready           (button_up_s1_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (button_up_s1_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (button_up_s1_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (button_up_s1_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (button_up_s1_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (button_up_s1_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (button_up_s1_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (button_up_s1_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (button_up_s1_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (button_up_s1_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (button_up_s1_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_up_s1_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (button_up_s1_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_up_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_up_s1_agent_rf_source_data),                           //        in.data
		.in_valid          (button_up_s1_agent_rf_source_valid),                          //          .valid
		.in_ready          (button_up_s1_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (button_up_s1_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (button_up_s1_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (button_up_s1_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (button_up_s1_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (button_up_s1_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (button_up_s1_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (button_up_s1_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_up_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_up_s1_agent_rdata_fifo_src_data),                      //        in.data
		.in_valid          (button_up_s1_agent_rdata_fifo_src_valid),                     //          .valid
		.in_ready          (button_up_s1_agent_rdata_fifo_src_ready),                     //          .ready
		.out_data          (button_up_s1_agent_rdata_fifo_out_data),                      //       out.data
		.out_valid         (button_up_s1_agent_rdata_fifo_out_valid),                     //          .valid
		.out_ready         (button_up_s1_agent_rdata_fifo_out_ready),                     //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_down_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (button_down_s1_agent_m0_address),                             //              m0.address
		.m0_burstcount           (button_down_s1_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (button_down_s1_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (button_down_s1_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (button_down_s1_agent_m0_lock),                                //                .lock
		.m0_readdata             (button_down_s1_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (button_down_s1_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (button_down_s1_agent_m0_read),                                //                .read
		.m0_waitrequest          (button_down_s1_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (button_down_s1_agent_m0_writedata),                           //                .writedata
		.m0_write                (button_down_s1_agent_m0_write),                               //                .write
		.rp_endofpacket          (button_down_s1_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (button_down_s1_agent_rp_ready),                               //                .ready
		.rp_valid                (button_down_s1_agent_rp_valid),                               //                .valid
		.rp_data                 (button_down_s1_agent_rp_data),                                //                .data
		.rp_startofpacket        (button_down_s1_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (button_down_s1_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (button_down_s1_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (button_down_s1_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (button_down_s1_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (button_down_s1_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (button_down_s1_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (button_down_s1_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (button_down_s1_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (button_down_s1_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (button_down_s1_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (button_down_s1_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (button_down_s1_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (button_down_s1_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (button_down_s1_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (button_down_s1_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (button_down_s1_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (button_down_s1_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_down_s1_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (button_down_s1_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_down_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_down_s1_agent_rf_source_data),                         //        in.data
		.in_valid          (button_down_s1_agent_rf_source_valid),                        //          .valid
		.in_ready          (button_down_s1_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (button_down_s1_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (button_down_s1_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (button_down_s1_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (button_down_s1_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (button_down_s1_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (button_down_s1_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (button_down_s1_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_down_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_down_s1_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (button_down_s1_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (button_down_s1_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (button_down_s1_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (button_down_s1_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (button_down_s1_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_left_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (button_left_s1_agent_m0_address),                             //              m0.address
		.m0_burstcount           (button_left_s1_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (button_left_s1_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (button_left_s1_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (button_left_s1_agent_m0_lock),                                //                .lock
		.m0_readdata             (button_left_s1_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (button_left_s1_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (button_left_s1_agent_m0_read),                                //                .read
		.m0_waitrequest          (button_left_s1_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (button_left_s1_agent_m0_writedata),                           //                .writedata
		.m0_write                (button_left_s1_agent_m0_write),                               //                .write
		.rp_endofpacket          (button_left_s1_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (button_left_s1_agent_rp_ready),                               //                .ready
		.rp_valid                (button_left_s1_agent_rp_valid),                               //                .valid
		.rp_data                 (button_left_s1_agent_rp_data),                                //                .data
		.rp_startofpacket        (button_left_s1_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (button_left_s1_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (button_left_s1_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (button_left_s1_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (button_left_s1_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (button_left_s1_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (button_left_s1_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (button_left_s1_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (button_left_s1_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (button_left_s1_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (button_left_s1_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (button_left_s1_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (button_left_s1_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (button_left_s1_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (button_left_s1_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (button_left_s1_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (button_left_s1_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (button_left_s1_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_left_s1_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (button_left_s1_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_left_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_left_s1_agent_rf_source_data),                         //        in.data
		.in_valid          (button_left_s1_agent_rf_source_valid),                        //          .valid
		.in_ready          (button_left_s1_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (button_left_s1_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (button_left_s1_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (button_left_s1_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (button_left_s1_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (button_left_s1_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (button_left_s1_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (button_left_s1_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_left_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_left_s1_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (button_left_s1_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (button_left_s1_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (button_left_s1_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (button_left_s1_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (button_left_s1_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_right_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (button_right_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (button_right_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (button_right_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (button_right_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (button_right_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (button_right_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (button_right_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (button_right_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (button_right_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (button_right_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (button_right_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (button_right_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (button_right_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (button_right_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (button_right_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (button_right_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (button_right_s1_burst_adapter_source0_ready),                 //              cp.ready
		.cp_valid                (button_right_s1_burst_adapter_source0_valid),                 //                .valid
		.cp_data                 (button_right_s1_burst_adapter_source0_data),                  //                .data
		.cp_startofpacket        (button_right_s1_burst_adapter_source0_startofpacket),         //                .startofpacket
		.cp_endofpacket          (button_right_s1_burst_adapter_source0_endofpacket),           //                .endofpacket
		.cp_channel              (button_right_s1_burst_adapter_source0_channel),               //                .channel
		.rf_sink_ready           (button_right_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (button_right_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (button_right_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (button_right_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (button_right_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (button_right_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (button_right_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (button_right_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (button_right_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (button_right_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (button_right_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_right_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (button_right_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_right_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_right_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (button_right_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (button_right_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (button_right_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (button_right_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (button_right_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (button_right_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (button_right_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (button_right_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (button_right_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_right_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_right_s1_agent_rdata_fifo_src_data),                   //        in.data
		.in_valid          (button_right_s1_agent_rdata_fifo_src_valid),                  //          .valid
		.in_ready          (button_right_s1_agent_rdata_fifo_src_ready),                  //          .ready
		.out_data          (button_right_s1_agent_rdata_fifo_out_data),                   //       out.data
		.out_valid         (button_right_s1_agent_rdata_fifo_out_valid),                  //          .valid
		.out_ready         (button_right_s1_agent_rdata_fifo_out_ready),                  //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) reset_switch_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (reset_switch_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (reset_switch_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (reset_switch_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (reset_switch_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (reset_switch_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (reset_switch_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (reset_switch_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (reset_switch_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (reset_switch_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (reset_switch_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (reset_switch_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (reset_switch_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (reset_switch_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (reset_switch_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (reset_switch_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (reset_switch_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (reset_switch_s1_burst_adapter_source0_ready),                 //              cp.ready
		.cp_valid                (reset_switch_s1_burst_adapter_source0_valid),                 //                .valid
		.cp_data                 (reset_switch_s1_burst_adapter_source0_data),                  //                .data
		.cp_startofpacket        (reset_switch_s1_burst_adapter_source0_startofpacket),         //                .startofpacket
		.cp_endofpacket          (reset_switch_s1_burst_adapter_source0_endofpacket),           //                .endofpacket
		.cp_channel              (reset_switch_s1_burst_adapter_source0_channel),               //                .channel
		.rf_sink_ready           (reset_switch_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (reset_switch_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (reset_switch_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (reset_switch_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (reset_switch_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (reset_switch_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (reset_switch_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (reset_switch_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (reset_switch_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (reset_switch_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (reset_switch_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (reset_switch_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (reset_switch_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) reset_switch_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (reset_switch_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (reset_switch_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (reset_switch_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (reset_switch_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (reset_switch_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (reset_switch_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (reset_switch_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (reset_switch_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (reset_switch_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (reset_switch_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) reset_switch_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (reset_switch_s1_agent_rdata_fifo_src_data),                   //        in.data
		.in_valid          (reset_switch_s1_agent_rdata_fifo_src_valid),                  //          .valid
		.in_ready          (reset_switch_s1_agent_rdata_fifo_src_ready),                  //          .ready
		.out_data          (reset_switch_s1_agent_rdata_fifo_out_data),                   //       out.data
		.out_valid         (reset_switch_s1_agent_rdata_fifo_out_valid),                  //          .valid
		.out_ready         (reset_switch_s1_agent_rdata_fifo_out_ready),                  //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	hps_mm_interconnect_0_router router (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                    //       src.ready
		.src_valid          (router_src_valid),                                                    //          .valid
		.src_data           (router_src_data),                                                     //          .data
		.src_channel        (router_src_channel),                                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //          .endofpacket
	);

	hps_mm_interconnect_0_router router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                //          .valid
		.src_data           (router_001_src_data),                                                 //          .data
		.src_channel        (router_001_src_channel),                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //          .endofpacket
	);

	hps_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (de10_vga_raster_sprites_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (de10_vga_raster_sprites_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (de10_vga_raster_sprites_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (de10_vga_raster_sprites_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (de10_vga_raster_sprites_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_002_src_ready),                                            //       src.ready
		.src_valid          (router_002_src_valid),                                            //          .valid
		.src_data           (router_002_src_data),                                             //          .data
		.src_channel        (router_002_src_channel),                                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                       //          .endofpacket
	);

	hps_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (hex0_s1_agent_rp_ready),                                      //      sink.ready
		.sink_valid         (hex0_s1_agent_rp_valid),                                      //          .valid
		.sink_data          (hex0_s1_agent_rp_data),                                       //          .data
		.sink_startofpacket (hex0_s1_agent_rp_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (hex0_s1_agent_rp_endofpacket),                                //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                        //       src.ready
		.src_valid          (router_003_src_valid),                                        //          .valid
		.src_data           (router_003_src_data),                                         //          .data
		.src_channel        (router_003_src_channel),                                      //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                   //          .endofpacket
	);

	hps_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (hex1_s1_agent_rp_ready),                                      //      sink.ready
		.sink_valid         (hex1_s1_agent_rp_valid),                                      //          .valid
		.sink_data          (hex1_s1_agent_rp_data),                                       //          .data
		.sink_startofpacket (hex1_s1_agent_rp_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (hex1_s1_agent_rp_endofpacket),                                //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                        //       src.ready
		.src_valid          (router_004_src_valid),                                        //          .valid
		.src_data           (router_004_src_data),                                         //          .data
		.src_channel        (router_004_src_channel),                                      //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                   //          .endofpacket
	);

	hps_mm_interconnect_0_router_003 router_005 (
		.sink_ready         (hex2_s1_agent_rp_ready),                                      //      sink.ready
		.sink_valid         (hex2_s1_agent_rp_valid),                                      //          .valid
		.sink_data          (hex2_s1_agent_rp_data),                                       //          .data
		.sink_startofpacket (hex2_s1_agent_rp_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (hex2_s1_agent_rp_endofpacket),                                //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                        //       src.ready
		.src_valid          (router_005_src_valid),                                        //          .valid
		.src_data           (router_005_src_data),                                         //          .data
		.src_channel        (router_005_src_channel),                                      //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                   //          .endofpacket
	);

	hps_mm_interconnect_0_router_003 router_006 (
		.sink_ready         (button_up_s1_agent_rp_ready),                                 //      sink.ready
		.sink_valid         (button_up_s1_agent_rp_valid),                                 //          .valid
		.sink_data          (button_up_s1_agent_rp_data),                                  //          .data
		.sink_startofpacket (button_up_s1_agent_rp_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (button_up_s1_agent_rp_endofpacket),                           //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                        //       src.ready
		.src_valid          (router_006_src_valid),                                        //          .valid
		.src_data           (router_006_src_data),                                         //          .data
		.src_channel        (router_006_src_channel),                                      //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                   //          .endofpacket
	);

	hps_mm_interconnect_0_router_003 router_007 (
		.sink_ready         (button_down_s1_agent_rp_ready),                               //      sink.ready
		.sink_valid         (button_down_s1_agent_rp_valid),                               //          .valid
		.sink_data          (button_down_s1_agent_rp_data),                                //          .data
		.sink_startofpacket (button_down_s1_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (button_down_s1_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                        //       src.ready
		.src_valid          (router_007_src_valid),                                        //          .valid
		.src_data           (router_007_src_data),                                         //          .data
		.src_channel        (router_007_src_channel),                                      //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                   //          .endofpacket
	);

	hps_mm_interconnect_0_router_003 router_008 (
		.sink_ready         (button_left_s1_agent_rp_ready),                               //      sink.ready
		.sink_valid         (button_left_s1_agent_rp_valid),                               //          .valid
		.sink_data          (button_left_s1_agent_rp_data),                                //          .data
		.sink_startofpacket (button_left_s1_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (button_left_s1_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                        //       src.ready
		.src_valid          (router_008_src_valid),                                        //          .valid
		.src_data           (router_008_src_data),                                         //          .data
		.src_channel        (router_008_src_channel),                                      //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                   //          .endofpacket
	);

	hps_mm_interconnect_0_router_003 router_009 (
		.sink_ready         (button_right_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (button_right_s1_agent_rp_valid),                              //          .valid
		.sink_data          (button_right_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (button_right_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (button_right_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                        //       src.ready
		.src_valid          (router_009_src_valid),                                        //          .valid
		.src_data           (router_009_src_data),                                         //          .data
		.src_channel        (router_009_src_channel),                                      //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                   //          .endofpacket
	);

	hps_mm_interconnect_0_router_003 router_010 (
		.sink_ready         (reset_switch_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (reset_switch_s1_agent_rp_valid),                              //          .valid
		.sink_data          (reset_switch_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (reset_switch_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (reset_switch_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                        //       src.ready
		.src_valid          (router_010_src_valid),                                        //          .valid
		.src_data           (router_010_src_data),                                         //          .data
		.src_channel        (router_010_src_channel),                                      //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                   //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.VALID_WIDTH               (9),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                    //          .valid
		.cmd_sink_data          (router_src_data),                                                     //          .data
		.cmd_sink_channel       (router_src_channel),                                                  //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                            //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                              //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                   //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                 //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.VALID_WIDTH               (9),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                //          .valid
		.cmd_sink_data          (router_001_src_data),                                                 //          .data
		.cmd_sink_channel       (router_001_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (38),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (66),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (45),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (61),
		.PKT_BURST_SIZE_L          (59),
		.PKT_BURST_TYPE_H          (63),
		.PKT_BURST_TYPE_L          (62),
		.PKT_BURSTWRAP_H           (58),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (39),
		.PKT_TRANS_WRITE           (41),
		.PKT_TRANS_READ            (42),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (100),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (46),
		.OUT_BURSTWRAP_H           (58),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                                //       cr0.clk
		.reset                 (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (de10_vga_raster_sprites_0_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) hex0_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                       //          .ready
		.source0_valid         (hex0_s1_burst_adapter_source0_valid),                         //   source0.valid
		.source0_data          (hex0_s1_burst_adapter_source0_data),                          //          .data
		.source0_channel       (hex0_s1_burst_adapter_source0_channel),                       //          .channel
		.source0_startofpacket (hex0_s1_burst_adapter_source0_startofpacket),                 //          .startofpacket
		.source0_endofpacket   (hex0_s1_burst_adapter_source0_endofpacket),                   //          .endofpacket
		.source0_ready         (hex0_s1_burst_adapter_source0_ready)                          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) hex1_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                       //          .ready
		.source0_valid         (hex1_s1_burst_adapter_source0_valid),                         //   source0.valid
		.source0_data          (hex1_s1_burst_adapter_source0_data),                          //          .data
		.source0_channel       (hex1_s1_burst_adapter_source0_channel),                       //          .channel
		.source0_startofpacket (hex1_s1_burst_adapter_source0_startofpacket),                 //          .startofpacket
		.source0_endofpacket   (hex1_s1_burst_adapter_source0_endofpacket),                   //          .endofpacket
		.source0_ready         (hex1_s1_burst_adapter_source0_ready)                          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) hex2_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                       //          .ready
		.source0_valid         (hex2_s1_burst_adapter_source0_valid),                         //   source0.valid
		.source0_data          (hex2_s1_burst_adapter_source0_data),                          //          .data
		.source0_channel       (hex2_s1_burst_adapter_source0_channel),                       //          .channel
		.source0_startofpacket (hex2_s1_burst_adapter_source0_startofpacket),                 //          .startofpacket
		.source0_endofpacket   (hex2_s1_burst_adapter_source0_endofpacket),                   //          .endofpacket
		.source0_ready         (hex2_s1_burst_adapter_source0_ready)                          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) button_up_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                       //          .ready
		.source0_valid         (button_up_s1_burst_adapter_source0_valid),                    //   source0.valid
		.source0_data          (button_up_s1_burst_adapter_source0_data),                     //          .data
		.source0_channel       (button_up_s1_burst_adapter_source0_channel),                  //          .channel
		.source0_startofpacket (button_up_s1_burst_adapter_source0_startofpacket),            //          .startofpacket
		.source0_endofpacket   (button_up_s1_burst_adapter_source0_endofpacket),              //          .endofpacket
		.source0_ready         (button_up_s1_burst_adapter_source0_ready)                     //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) button_down_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                       //          .ready
		.source0_valid         (button_down_s1_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (button_down_s1_burst_adapter_source0_data),                   //          .data
		.source0_channel       (button_down_s1_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (button_down_s1_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (button_down_s1_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (button_down_s1_burst_adapter_source0_ready)                   //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) button_left_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                       //          .ready
		.source0_valid         (button_left_s1_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (button_left_s1_burst_adapter_source0_data),                   //          .data
		.source0_channel       (button_left_s1_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (button_left_s1_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (button_left_s1_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (button_left_s1_burst_adapter_source0_ready)                   //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) button_right_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                       //          .ready
		.source0_valid         (button_right_s1_burst_adapter_source0_valid),                 //   source0.valid
		.source0_data          (button_right_s1_burst_adapter_source0_data),                  //          .data
		.source0_channel       (button_right_s1_burst_adapter_source0_channel),               //          .channel
		.source0_startofpacket (button_right_s1_burst_adapter_source0_startofpacket),         //          .startofpacket
		.source0_endofpacket   (button_right_s1_burst_adapter_source0_endofpacket),           //          .endofpacket
		.source0_ready         (button_right_s1_burst_adapter_source0_ready)                  //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) reset_switch_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                                       //          .ready
		.source0_valid         (reset_switch_s1_burst_adapter_source0_valid),                 //   source0.valid
		.source0_data          (reset_switch_s1_burst_adapter_source0_data),                  //          .data
		.source0_channel       (reset_switch_s1_burst_adapter_source0_channel),               //          .channel
		.source0_startofpacket (reset_switch_s1_burst_adapter_source0_startofpacket),         //          .startofpacket
		.source0_endofpacket   (reset_switch_s1_burst_adapter_source0_endofpacket),           //          .endofpacket
		.source0_ready         (reset_switch_s1_burst_adapter_source0_ready)                  //          .ready
	);

	hps_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                       //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                //           .valid
		.src0_data          (cmd_demux_src0_data),                                                 //           .data
		.src0_channel       (cmd_demux_src0_channel),                                              //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                          //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                //           .valid
		.src1_data          (cmd_demux_src1_data),                                                 //           .data
		.src1_channel       (cmd_demux_src1_channel),                                              //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                          //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                //           .valid
		.src2_data          (cmd_demux_src2_data),                                                 //           .data
		.src2_channel       (cmd_demux_src2_channel),                                              //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                          //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                                //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                                //           .valid
		.src3_data          (cmd_demux_src3_data),                                                 //           .data
		.src3_channel       (cmd_demux_src3_channel),                                              //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                        //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                          //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                                //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                                //           .valid
		.src4_data          (cmd_demux_src4_data),                                                 //           .data
		.src4_channel       (cmd_demux_src4_channel),                                              //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                        //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                                          //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                                //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                                //           .valid
		.src5_data          (cmd_demux_src5_data),                                                 //           .data
		.src5_channel       (cmd_demux_src5_channel),                                              //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                                        //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                                          //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                                //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                                //           .valid
		.src6_data          (cmd_demux_src6_data),                                                 //           .data
		.src6_channel       (cmd_demux_src6_channel),                                              //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                                        //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                                          //           .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                                                //       src7.ready
		.src7_valid         (cmd_demux_src7_valid),                                                //           .valid
		.src7_data          (cmd_demux_src7_data),                                                 //           .data
		.src7_channel       (cmd_demux_src7_channel),                                              //           .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                                        //           .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                                          //           .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                                                //       src8.ready
		.src8_valid         (cmd_demux_src8_valid),                                                //           .valid
		.src8_data          (cmd_demux_src8_data),                                                 //           .data
		.src8_channel       (cmd_demux_src8_channel),                                              //           .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                                        //           .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket)                                           //           .endofpacket
	);

	hps_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                       //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                      //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                            //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                            //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                             //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                          //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                      //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                            //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                            //           .valid
		.src3_data          (cmd_demux_001_src3_data),                                             //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                          //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                                      //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                                            //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                                            //           .valid
		.src4_data          (cmd_demux_001_src4_data),                                             //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                                          //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                                      //           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                                            //       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                                            //           .valid
		.src5_data          (cmd_demux_001_src5_data),                                             //           .data
		.src5_channel       (cmd_demux_001_src5_channel),                                          //           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),                                      //           .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                                            //       src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                                            //           .valid
		.src6_data          (cmd_demux_001_src6_data),                                             //           .data
		.src6_channel       (cmd_demux_001_src6_channel),                                          //           .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),                                    //           .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket),                                      //           .endofpacket
		.src7_ready         (cmd_demux_001_src7_ready),                                            //       src7.ready
		.src7_valid         (cmd_demux_001_src7_valid),                                            //           .valid
		.src7_data          (cmd_demux_001_src7_data),                                             //           .data
		.src7_channel       (cmd_demux_001_src7_channel),                                          //           .channel
		.src7_startofpacket (cmd_demux_001_src7_startofpacket),                                    //           .startofpacket
		.src7_endofpacket   (cmd_demux_001_src7_endofpacket),                                      //           .endofpacket
		.src8_ready         (cmd_demux_001_src8_ready),                                            //       src8.ready
		.src8_valid         (cmd_demux_001_src8_valid),                                            //           .valid
		.src8_data          (cmd_demux_001_src8_data),                                             //           .data
		.src8_channel       (cmd_demux_001_src8_channel),                                          //           .channel
		.src8_startofpacket (cmd_demux_001_src8_startofpacket),                                    //           .startofpacket
		.src8_endofpacket   (cmd_demux_001_src8_endofpacket)                                       //           .endofpacket
	);

	hps_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                               //       clk.clk
		.reset               (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                                           //          .valid
		.src_data            (cmd_mux_src_data),                                            //          .data
		.src_channel         (cmd_mux_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src0_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                    //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                  //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                     //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                               //       clk.clk
		.reset               (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                       //          .valid
		.src_data            (cmd_mux_001_src_data),                                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src1_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                                    //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                                  //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                                     //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                               //       clk.clk
		.reset               (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                       //          .valid
		.src_data            (cmd_mux_002_src_data),                                        //          .data
		.src_channel         (cmd_mux_002_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src2_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                                    //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                                  //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                                     //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                               //       clk.clk
		.reset               (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                       //          .valid
		.src_data            (cmd_mux_003_src_data),                                        //          .data
		.src_channel         (cmd_mux_003_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src3_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                                    //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                                  //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                                     //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                               //       clk.clk
		.reset               (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                       //          .valid
		.src_data            (cmd_mux_004_src_data),                                        //          .data
		.src_channel         (cmd_mux_004_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src4_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                                    //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                                  //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                                     //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                               //       clk.clk
		.reset               (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                       //          .valid
		.src_data            (cmd_mux_005_src_data),                                        //          .data
		.src_channel         (cmd_mux_005_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src5_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                                    //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                                  //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                                     //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),                            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                               //       clk.clk
		.reset               (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                       //          .valid
		.src_data            (cmd_mux_006_src_data),                                        //          .data
		.src_channel         (cmd_mux_006_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src6_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                                    //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                                  //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                                     //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),                            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                               //       clk.clk
		.reset               (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                       //          .valid
		.src_data            (cmd_mux_007_src_data),                                        //          .data
		.src_channel         (cmd_mux_007_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src7_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                                    //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                                  //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                                     //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),                            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                               //       clk.clk
		.reset               (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                       //          .valid
		.src_data            (cmd_mux_008_src_data),                                        //          .data
		.src_channel         (cmd_mux_008_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src8_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                                    //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                                  //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                                     //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),                            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                                                //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                         //          .valid
		.src0_data          (rsp_demux_src0_data),                                                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                                                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                                   //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                                         //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                                         //          .valid
		.src1_data          (rsp_demux_src1_data),                                                          //          .data
		.src1_channel       (rsp_demux_src1_channel),                                                       //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                                    //          .endofpacket
	);

	hps_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                        //      sink.ready
		.sink_channel       (router_003_src_channel),                                      //          .channel
		.sink_data          (router_003_src_data),                                         //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_003_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                        //      sink.ready
		.sink_channel       (router_004_src_channel),                                      //          .channel
		.sink_data          (router_004_src_data),                                         //          .data
		.sink_startofpacket (router_004_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_004_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_002_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                        //      sink.ready
		.sink_channel       (router_005_src_channel),                                      //          .channel
		.sink_data          (router_005_src_data),                                         //          .data
		.sink_startofpacket (router_005_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_005_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_003_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                        //      sink.ready
		.sink_channel       (router_006_src_channel),                                      //          .channel
		.sink_data          (router_006_src_data),                                         //          .data
		.sink_startofpacket (router_006_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_006_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_004_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                        //      sink.ready
		.sink_channel       (router_007_src_channel),                                      //          .channel
		.sink_data          (router_007_src_data),                                         //          .data
		.sink_startofpacket (router_007_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_007_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_005_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                        //      sink.ready
		.sink_channel       (router_008_src_channel),                                      //          .channel
		.sink_data          (router_008_src_data),                                         //          .data
		.sink_startofpacket (router_008_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_008_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_006_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                        //      sink.ready
		.sink_channel       (router_009_src_channel),                                      //          .channel
		.sink_data          (router_009_src_data),                                         //          .data
		.sink_startofpacket (router_009_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_009_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_007_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                        //      sink.ready
		.sink_channel       (router_010_src_channel),                                      //          .channel
		.sink_data          (router_010_src_data),                                         //          .data
		.sink_startofpacket (router_010_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_010_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_008_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                               //          .endofpacket
	);

	hps_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                   //          .valid
		.src_data            (rsp_mux_src_data),                                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                          //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                          //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                      //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                            //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                            //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                          //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                             //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                      //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                            //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                            //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                          //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                             //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                                      //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                            //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                            //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                                          //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                             //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                                      //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                                            //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                                            //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                                          //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                                             //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),                                      //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                                            //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                                            //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                                          //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                                             //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),                                      //          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),                                            //     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),                                            //          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),                                          //          .channel
		.sink8_data          (rsp_demux_008_src0_data),                                             //          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket)                                       //          .endofpacket
	);

	hps_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                               //          .valid
		.src_data            (rsp_mux_001_src_data),                                                //          .data
		.src_channel         (rsp_mux_001_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src1_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                          //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                          //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                                      //          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                                            //     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                                            //          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                                          //          .channel
		.sink3_data          (rsp_demux_003_src1_data),                                             //          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket),                                      //          .endofpacket
		.sink4_ready         (rsp_demux_004_src1_ready),                                            //     sink4.ready
		.sink4_valid         (rsp_demux_004_src1_valid),                                            //          .valid
		.sink4_channel       (rsp_demux_004_src1_channel),                                          //          .channel
		.sink4_data          (rsp_demux_004_src1_data),                                             //          .data
		.sink4_startofpacket (rsp_demux_004_src1_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src1_endofpacket),                                      //          .endofpacket
		.sink5_ready         (rsp_demux_005_src1_ready),                                            //     sink5.ready
		.sink5_valid         (rsp_demux_005_src1_valid),                                            //          .valid
		.sink5_channel       (rsp_demux_005_src1_channel),                                          //          .channel
		.sink5_data          (rsp_demux_005_src1_data),                                             //          .data
		.sink5_startofpacket (rsp_demux_005_src1_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src1_endofpacket),                                      //          .endofpacket
		.sink6_ready         (rsp_demux_006_src1_ready),                                            //     sink6.ready
		.sink6_valid         (rsp_demux_006_src1_valid),                                            //          .valid
		.sink6_channel       (rsp_demux_006_src1_channel),                                          //          .channel
		.sink6_data          (rsp_demux_006_src1_data),                                             //          .data
		.sink6_startofpacket (rsp_demux_006_src1_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src1_endofpacket),                                      //          .endofpacket
		.sink7_ready         (rsp_demux_007_src1_ready),                                            //     sink7.ready
		.sink7_valid         (rsp_demux_007_src1_valid),                                            //          .valid
		.sink7_channel       (rsp_demux_007_src1_channel),                                          //          .channel
		.sink7_data          (rsp_demux_007_src1_data),                                             //          .data
		.sink7_startofpacket (rsp_demux_007_src1_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src1_endofpacket),                                      //          .endofpacket
		.sink8_ready         (rsp_demux_008_src1_ready),                                            //     sink8.ready
		.sink8_valid         (rsp_demux_008_src1_valid),                                            //          .valid
		.sink8_channel       (rsp_demux_008_src1_channel),                                          //          .channel
		.sink8_data          (rsp_demux_008_src1_data),                                             //          .data
		.sink8_startofpacket (rsp_demux_008_src1_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src1_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (38),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (45),
		.IN_PKT_TRANS_COMPRESSED_READ  (39),
		.IN_PKT_TRANS_WRITE            (41),
		.IN_PKT_BURSTWRAP_H            (58),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (61),
		.IN_PKT_BURST_SIZE_L           (59),
		.IN_PKT_RESPONSE_STATUS_H      (96),
		.IN_PKT_RESPONSE_STATUS_L      (95),
		.IN_PKT_TRANS_EXCLUSIVE        (44),
		.IN_PKT_BURST_TYPE_H           (63),
		.IN_PKT_BURST_TYPE_L           (62),
		.IN_PKT_ORI_BURST_SIZE_L       (97),
		.IN_PKT_ORI_BURST_SIZE_H       (99),
		.IN_ST_DATA_W                  (100),
		.OUT_PKT_ADDR_H                (56),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (69),
		.OUT_PKT_BYTE_CNT_L            (63),
		.OUT_PKT_TRANS_COMPRESSED_READ (57),
		.OUT_PKT_BURST_SIZE_H          (79),
		.OUT_PKT_BURST_SIZE_L          (77),
		.OUT_PKT_RESPONSE_STATUS_H     (114),
		.OUT_PKT_RESPONSE_STATUS_L     (113),
		.OUT_PKT_TRANS_EXCLUSIVE       (62),
		.OUT_PKT_BURST_TYPE_H          (81),
		.OUT_PKT_BURST_TYPE_L          (80),
		.OUT_PKT_ORI_BURST_SIZE_L      (115),
		.OUT_PKT_ORI_BURST_SIZE_H      (117),
		.OUT_ST_DATA_W                 (118),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                //       clk.clk
		.reset                (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_002_src_valid),                                                         //      sink.valid
		.in_channel           (router_002_src_channel),                                                       //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                                   //          .endofpacket
		.in_ready             (router_002_src_ready),                                                         //          .ready
		.in_data              (router_002_src_data),                                                          //          .data
		.out_endofpacket      (de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (de10_vga_raster_sprites_0_avalon_slave_0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (56),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (69),
		.IN_PKT_BYTE_CNT_L             (63),
		.IN_PKT_TRANS_COMPRESSED_READ  (57),
		.IN_PKT_TRANS_WRITE            (59),
		.IN_PKT_BURSTWRAP_H            (76),
		.IN_PKT_BURSTWRAP_L            (70),
		.IN_PKT_BURST_SIZE_H           (79),
		.IN_PKT_BURST_SIZE_L           (77),
		.IN_PKT_RESPONSE_STATUS_H      (114),
		.IN_PKT_RESPONSE_STATUS_L      (113),
		.IN_PKT_TRANS_EXCLUSIVE        (62),
		.IN_PKT_BURST_TYPE_H           (81),
		.IN_PKT_BURST_TYPE_L           (80),
		.IN_PKT_ORI_BURST_SIZE_L       (115),
		.IN_PKT_ORI_BURST_SIZE_H       (117),
		.IN_ST_DATA_W                  (118),
		.OUT_PKT_ADDR_H                (38),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (45),
		.OUT_PKT_TRANS_COMPRESSED_READ (39),
		.OUT_PKT_BURST_SIZE_H          (61),
		.OUT_PKT_BURST_SIZE_L          (59),
		.OUT_PKT_RESPONSE_STATUS_H     (96),
		.OUT_PKT_RESPONSE_STATUS_L     (95),
		.OUT_PKT_TRANS_EXCLUSIVE       (44),
		.OUT_PKT_BURST_TYPE_H          (63),
		.OUT_PKT_BURST_TYPE_L          (62),
		.OUT_PKT_ORI_BURST_SIZE_L      (97),
		.OUT_PKT_ORI_BURST_SIZE_H      (99),
		.OUT_ST_DATA_W                 (100),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                //       clk.clk
		.reset                (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                            //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                          //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                                    //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                      //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                            //          .ready
		.in_data              (cmd_mux_src_data),                                                             //          .data
		.out_endofpacket      (de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (de10_vga_raster_sprites_0_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	hps_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                                       // in_clk_0.clk
		.in_rst_0_reset (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (de10_vga_raster_sprites_0_avalon_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                       //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                       //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                        //         .error
	);

	hps_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex0_s1_agent_rdata_fifo_out_data),                           //     in_0.data
		.in_0_valid     (hex0_s1_agent_rdata_fifo_out_valid),                          //         .valid
		.in_0_ready     (hex0_s1_agent_rdata_fifo_out_ready),                          //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                            //         .error
	);

	hps_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex1_s1_agent_rdata_fifo_out_data),                           //     in_0.data
		.in_0_valid     (hex1_s1_agent_rdata_fifo_out_valid),                          //         .valid
		.in_0_ready     (hex1_s1_agent_rdata_fifo_out_ready),                          //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                            //         .error
	);

	hps_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex2_s1_agent_rdata_fifo_out_data),                           //     in_0.data
		.in_0_valid     (hex2_s1_agent_rdata_fifo_out_valid),                          //         .valid
		.in_0_ready     (hex2_s1_agent_rdata_fifo_out_ready),                          //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                            //         .error
	);

	hps_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (button_up_s1_agent_rdata_fifo_out_data),                      //     in_0.data
		.in_0_valid     (button_up_s1_agent_rdata_fifo_out_valid),                     //         .valid
		.in_0_ready     (button_up_s1_agent_rdata_fifo_out_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                            //         .error
	);

	hps_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (button_down_s1_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (button_down_s1_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (button_down_s1_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                            //         .error
	);

	hps_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (button_left_s1_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (button_left_s1_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (button_left_s1_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                            //         .error
	);

	hps_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (button_right_s1_agent_rdata_fifo_out_data),                   //     in_0.data
		.in_0_valid     (button_right_s1_agent_rdata_fifo_out_valid),                  //         .valid
		.in_0_ready     (button_right_s1_agent_rdata_fifo_out_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                            //         .error
	);

	hps_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (de10_vga_raster_sprites_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (reset_switch_s1_agent_rdata_fifo_out_data),                   //     in_0.data
		.in_0_valid     (reset_switch_s1_agent_rdata_fifo_out_valid),                  //         .valid
		.in_0_ready     (reset_switch_s1_agent_rdata_fifo_out_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                            //         .error
	);

endmodule
